{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\r\n * created by zain ahmed \r\n * create data: 25/12/2019\r\n */\nimport genericfunctions from 'utilfunction/util-api-service';\nimport Router from 'next/router';\nexport var LOGIN = \"LOGIN\";\nexport var LOGOUT = \"LOGOUT\";\nexport var SIGNUP = \"SIGNUP\";\nexport var REDUXDATA = \"REDUXDATA\";\nimport jwtServices from 'common/jwt-services';\nimport deleteObject from 'common/jwt-services';\nimport axiosinstance from 'common/config.axios'; // import store from '../'\n\n/**\r\n * \r\n * @param {*email(string) password(string)} params ,\r\n *  * discription: user login function\r\n * function loginFN as login\r\n * \r\n */\n\nexport var login = function login(params) {\n  return function (dispatch, getState) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._postRequest(params.url, params.userData).then(function (res) {\n        if (res.data.response.status) {\n          axiosinstance.defaults.headers.common['Authorization'] = res.data.response.data.token;\n\n          var authUser = _objectSpread({}, res.data.response.data, {\n            socialLogin: params.socialLogin,\n            profilePic: res.data.response.data.profilePic.url ? res.data.response.data.profilePic.url : res.data.response.data.profilePic\n          });\n\n          var paylodaData = _objectSpread({}, authUser, {\n            profilePic: res.data.response.data.profilePic.url ? res.data.response.data.profilePic.url : res.data.response.data.profilePic,\n            socialLogin: params.socialLogin\n          });\n\n          jwtServices.setObject('authUser', authUser);\n          dispatch({\n            type: \"LOGIN\",\n            payload: paylodaData\n          });\n          resolve(res); // if (getState().general.hasPrevUrl)\n          //     Router.back()\n          // else Router.replace('/')\n\n          window.location = '/';\n        } else {\n          resolve(res);\n        }\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\n/**\r\n * \r\n * @param {*token(JWT)} params ,\r\n *  * discription: user lougOut function\r\n * function logoutFN as logoutFN\r\n * \r\n */\n\nexport var logoutFN = function logoutFN(params) {\n  return function (dispatch) {\n    genericfunctions._postRequest(params.url, params).then(function (res) {\n      if (res.data.response.status) {\n        var authUser = {};\n        deleteObject.deleteObject('authUser');\n        dispatch({\n          type: \"LOGOUT\",\n          payload: authUser\n        });\n        dispatch({\n          type: \"POSTLIKES\",\n          payload: []\n        });\n        Router.replace('/login');\n      }\n    });\n  };\n};\n/**\r\n * \r\n * @param {*fullanme(string) email(string) password(string)} params ,\r\n * discription: user signup function\r\n * function signUpFN as signup\r\n * \r\n */\n\nexport var signup = function signup(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._postRequest(params.url, params.userData).then(function (res) {\n        if (res.data.response.status) {\n          var authUser = _objectSpread({}, res.data.response.data, {\n            socialLogin: params.socialLogin,\n            role: 'user'\n          });\n\n          var paylodaData = _objectSpread({}, authUser, {\n            socialLogin: params.socialLogin,\n            role: 'user'\n          });\n\n          jwtServices.setObject('authUser', authUser);\n          dispatch({\n            type: \"SIGNUP\",\n            payload: paylodaData\n          });\n          window.location = '/'; //Router.push('/home')\n\n          resolve(res);\n        } else {\n          resolve(res);\n        }\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\n/**\r\n * \r\n * @param {*email(string) fullname(string) token(JWT) role(string) socialLogin(Boolen)} params ,\r\n *  * discription: data restore to redux from coockie function\r\n * function reduxData as reduxdata\r\n * \r\n */\n\nexport var reduxdata = function reduxdata(params) {\n  return function (dispatch) {\n    dispatch({\n      type: \"REDUXDATA\",\n      payload: params\n    });\n  };\n};","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/redux/action/authAction.js"],"names":["genericfunctions","Router","LOGIN","LOGOUT","SIGNUP","REDUXDATA","jwtServices","deleteObject","axiosinstance","login","params","dispatch","getState","resolve","reject","_postRequest","url","userData","then","res","data","response","status","defaults","headers","common","token","authUser","socialLogin","profilePic","paylodaData","setObject","type","payload","window","location","err","message","logoutFN","replace","signup","role","reduxdata"],"mappings":";;;;;;;;;;;;;AACA;;;;AAKA,OAAOA,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,IAAMC,KAAK,GAAG,OAAd;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,qBAA1B,C,CACA;;AAEA;;;;;;;;AAOA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,MAAM;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD,WAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCd,MAAAA,gBAAgB,CAACe,YAAjB,CAA8BL,MAAM,CAACM,GAArC,EAA0CN,MAAM,CAACO,QAAjD,EAA2DC,IAA3D,CAAgE,UAAAC,GAAG,EAAI;AACnE,YAAIA,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBC,MAAtB,EAA8B;AAC1Bd,UAAAA,aAAa,CAACe,QAAd,CAAuBC,OAAvB,CAA+BC,MAA/B,CAAsC,eAAtC,IAAyDN,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBM,KAAhF;;AAEA,cAAIC,QAAQ,qBACLR,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IADb;AAERQ,YAAAA,WAAW,EAAElB,MAAM,CAACkB,WAFZ;AAGRC,YAAAA,UAAU,EAAEV,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS,UAAvB,CAAkCb,GAAlC,GAAwCG,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS,UAAvB,CAAkCb,GAA1E,GAAgFG,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS;AAH3G,YAAZ;;AAKA,cAAIC,WAAW,qBACRH,QADQ;AAEXE,YAAAA,UAAU,EAAEV,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS,UAAvB,CAAkCb,GAAlC,GAAwCG,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS,UAAvB,CAAkCb,GAA1E,GAAgFG,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IAAlB,CAAuBS,UAFxG;AAGXD,YAAAA,WAAW,EAAElB,MAAM,CAACkB;AAHT,YAAf;;AAMAtB,UAAAA,WAAW,CAACyB,SAAZ,CAAsB,UAAtB,EAAkCJ,QAAlC;AACAhB,UAAAA,QAAQ,CAAC;AAAEqB,YAAAA,IAAI,EAAE,OAAR;AAAiBC,YAAAA,OAAO,EAAEH;AAA1B,WAAD,CAAR;AACAjB,UAAAA,OAAO,CAACM,GAAD,CAAP,CAhB0B,CAiB1B;AACA;AACA;;AACAe,UAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AAGH,SAvBD,MAuBO;AACHtB,UAAAA,OAAO,CAACM,GAAD,CAAP;AACH;AACJ,OA3BD,WA4BW,UAACiB,GAAD,EAAS;AACZtB,QAAAA,MAAM,CAAC;AAAEuB,UAAAA,OAAO,EAAED;AAAX,SAAD,CAAN;AACH,OA9BL;AA+BH,KAhCM,CAAP;AAkCH,GAnC0B;AAAA,CAApB;AAsCP;;;;;;;;AAOA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAC5B,MAAD,EAAY;AAChC,SAAO,UAACC,QAAD,EAAc;AAEjBX,IAAAA,gBAAgB,CAACe,YAAjB,CAA8BL,MAAM,CAACM,GAArC,EAA0CN,MAA1C,EAAkDQ,IAAlD,CAAuD,UAAAC,GAAG,EAAI;AAC1D,UAAIA,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBC,MAAtB,EAA8B;AAC1B,YAAIK,QAAQ,GAAG,EAAf;AACApB,QAAAA,YAAY,CAACA,YAAb,CAA0B,UAA1B;AACAI,QAAAA,QAAQ,CAAC;AAAEqB,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,OAAO,EAAEN;AAA3B,SAAD,CAAR;AACAhB,QAAAA,QAAQ,CAAC;AAAEqB,UAAAA,IAAI,EAAE,WAAR;AAAqBC,UAAAA,OAAO,EAAE;AAA9B,SAAD,CAAR;AACAhC,QAAAA,MAAM,CAACsC,OAAP,CAAe,QAAf;AACH;AACJ,KARD;AAUH,GAZD;AAaH,CAdM;AAiBP;;;;;;;;AAOA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAC9B,MAAD,EAAY;AAC9B,SAAO,UAACC,QAAD,EAAc;AACjB,WAAO,aAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACpCd,MAAAA,gBAAgB,CAACe,YAAjB,CAA8BL,MAAM,CAACM,GAArC,EAA0CN,MAAM,CAACO,QAAjD,EAA2DC,IAA3D,CAAgE,UAAAC,GAAG,EAAI;AACnE,YAAIA,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBC,MAAtB,EAA8B;AAC1B,cAAIK,QAAQ,qBACLR,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkBD,IADb;AAERQ,YAAAA,WAAW,EAAElB,MAAM,CAACkB,WAFZ;AAGRa,YAAAA,IAAI,EAAE;AAHE,YAAZ;;AAKA,cAAIX,WAAW,qBACRH,QADQ;AAEXC,YAAAA,WAAW,EAAElB,MAAM,CAACkB,WAFT;AAGXa,YAAAA,IAAI,EAAE;AAHK,YAAf;;AAKAnC,UAAAA,WAAW,CAACyB,SAAZ,CAAsB,UAAtB,EAAkCJ,QAAlC;AACAhB,UAAAA,QAAQ,CAAC;AAAEqB,YAAAA,IAAI,EAAE,QAAR;AAAkBC,YAAAA,OAAO,EAAEH;AAA3B,WAAD,CAAR;AACAI,UAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB,CAb0B,CAc1B;;AACAtB,UAAAA,OAAO,CAACM,GAAD,CAAP;AAEH,SAjBD,MAiBO;AACHN,UAAAA,OAAO,CAACM,GAAD,CAAP;AACH;AACJ,OArBD,WAsBW,UAAAiB,GAAG,EAAI;AACVtB,QAAAA,MAAM,CAAC;AAAEuB,UAAAA,OAAO,EAAED;AAAX,SAAD,CAAN;AACH,OAxBL;AAyBH,KA1BM,CAAP;AA4BH,GA7BD;AA8BH,CA/BM;AAkCP;;;;;;;;AAQA,OAAO,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAAChC,MAAD,EAAY;AACjC,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEqB,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEvB;AAA9B,KAAD,CAAR;AACH,GAFD;AAGH,CAJM","sourcesContent":["\r\n/**\r\n * created by zain ahmed \r\n * create data: 25/12/2019\r\n */\r\n\r\nimport genericfunctions from 'utilfunction/util-api-service'\r\nimport Router from 'next/router'\r\nexport const LOGIN = \"LOGIN\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const SIGNUP = \"SIGNUP\";\r\nexport const REDUXDATA = \"REDUXDATA\";\r\nimport jwtServices from 'common/jwt-services'\r\nimport deleteObject from 'common/jwt-services'\r\nimport axiosinstance from 'common/config.axios'\r\n// import store from '../'\r\n\r\n/**\r\n * \r\n * @param {*email(string) password(string)} params ,\r\n *  * discription: user login function\r\n * function loginFN as login\r\n * \r\n */\r\nexport const login = params => (dispatch, getState) => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._postRequest(params.url, params.userData).then(res => {\r\n            if (res.data.response.status) {\r\n                axiosinstance.defaults.headers.common['Authorization'] = res.data.response.data.token;\r\n\r\n                let authUser = {\r\n                    ...res.data.response.data,\r\n                    socialLogin: params.socialLogin,\r\n                    profilePic: res.data.response.data.profilePic.url ? res.data.response.data.profilePic.url : res.data.response.data.profilePic,\r\n                }\r\n                let paylodaData = {\r\n                    ...authUser,\r\n                    profilePic: res.data.response.data.profilePic.url ? res.data.response.data.profilePic.url : res.data.response.data.profilePic,\r\n                    socialLogin: params.socialLogin\r\n                }\r\n\r\n                jwtServices.setObject('authUser', authUser)\r\n                dispatch({ type: \"LOGIN\", payload: paylodaData });\r\n                resolve(res);\r\n                // if (getState().general.hasPrevUrl)\r\n                //     Router.back()\r\n                // else Router.replace('/')\r\n                window.location = '/'\r\n\r\n\r\n            } else {\r\n                resolve(res);\r\n            }\r\n        })\r\n            .catch((err) => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\n\r\n/**\r\n * \r\n * @param {*token(JWT)} params ,\r\n *  * discription: user lougOut function\r\n * function logoutFN as logoutFN\r\n * \r\n */\r\nexport const logoutFN = (params) => {\r\n    return (dispatch) => {\r\n\r\n        genericfunctions._postRequest(params.url, params).then(res => {\r\n            if (res.data.response.status) {\r\n                let authUser = {};\r\n                deleteObject.deleteObject('authUser')\r\n                dispatch({ type: \"LOGOUT\", payload: authUser });\r\n                dispatch({ type: \"POSTLIKES\", payload: [] });\r\n                Router.replace('/login')\r\n            }\r\n        })\r\n\r\n    };\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {*fullanme(string) email(string) password(string)} params ,\r\n * discription: user signup function\r\n * function signUpFN as signup\r\n * \r\n */\r\nexport const signup = (params) => {\r\n    return (dispatch) => {\r\n        return new Promise((resolve, reject) => {\r\n            genericfunctions._postRequest(params.url, params.userData).then(res => {\r\n                if (res.data.response.status) {\r\n                    let authUser = {\r\n                        ...res.data.response.data,\r\n                        socialLogin: params.socialLogin,\r\n                        role: 'user'\r\n                    };\r\n                    let paylodaData = {\r\n                        ...authUser,\r\n                        socialLogin: params.socialLogin,\r\n                        role: 'user'\r\n                    }\r\n                    jwtServices.setObject('authUser', authUser)\r\n                    dispatch({ type: \"SIGNUP\", payload: paylodaData });\r\n                    window.location = '/'\r\n                    //Router.push('/home')\r\n                    resolve(res);\r\n\r\n                } else {\r\n                    resolve(res)\r\n                }\r\n            })\r\n                .catch(err => {\r\n                    reject({ message: err });\r\n                })\r\n        })\r\n\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * \r\n * @param {*email(string) fullname(string) token(JWT) role(string) socialLogin(Boolen)} params ,\r\n *  * discription: data restore to redux from coockie function\r\n * function reduxData as reduxdata\r\n * \r\n */\r\n\r\nexport const reduxdata = (params) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: \"REDUXDATA\", payload: params })\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}