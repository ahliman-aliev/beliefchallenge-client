{"ast":null,"code":"export default {\n  /**\r\n       * @name @convertToFormData\r\n       * @description convert data to FormData\r\n       * @requires form data\r\n       * */\n  convertToFormData(form) {\n    var bodyFormData = new FormData();\n\n    for (var i in form) {\n      if (form[i] instanceof FileList) {\n        for (var j in form[i]) {\n          bodyFormData.append(i, form[i][j]);\n        }\n      } else {\n        bodyFormData.set(i, form[i]);\n      }\n    }\n\n    return bodyFormData;\n  },\n\n  getCookie(cookiename, cookieData) {\n    // Get name followed by anything except a semicolon\n    var cookiestring = RegExp(cookiename + \"=[^;]+\").exec(cookieData); // Return everything after the equal sign, or an empty string if the cookie name not found\n\n    return decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, \"\") : \"\");\n  }\n\n};","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/common/general-methods.js"],"names":["convertToFormData","form","bodyFormData","FormData","i","FileList","j","append","set","getCookie","cookiename","cookieData","cookiestring","RegExp","exec","decodeURIComponent","toString","replace"],"mappings":"AACA,eAAe;AACX;;;;;AAMAA,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,QAAIC,YAAY,GAAG,IAAIC,QAAJ,EAAnB;;AACA,SAAK,IAAIC,CAAT,IAAcH,IAAd,EAAoB;AAChB,UAAIA,IAAI,CAACG,CAAD,CAAJ,YAAmBC,QAAvB,EAAiC;AAC7B,aAAK,IAAIC,CAAT,IAAcL,IAAI,CAACG,CAAD,CAAlB,EAAuB;AACnBF,UAAAA,YAAY,CAACK,MAAb,CAAoBH,CAApB,EAAuBH,IAAI,CAACG,CAAD,CAAJ,CAAQE,CAAR,CAAvB;AACH;AACJ,OAJD,MAIO;AACHJ,QAAAA,YAAY,CAACM,GAAb,CAAiBJ,CAAjB,EAAoBH,IAAI,CAACG,CAAD,CAAxB;AACH;AACJ;;AACD,WAAOF,YAAP;AACH,GAnBU;;AAoBXO,EAAAA,SAAS,CAACC,UAAD,EAAaC,UAAb,EAAyB;AAC9B;AACA,QAAIC,YAAY,GAAGC,MAAM,CAACH,UAAU,GAAG,QAAd,CAAN,CAA8BI,IAA9B,CAAmCH,UAAnC,CAAnB,CAF8B,CAG9B;;AACA,WAAOI,kBAAkB,CAAC,CAAC,CAACH,YAAF,GAAiBA,YAAY,CAACI,QAAb,GAAwBC,OAAxB,CAAgC,SAAhC,EAA2C,EAA3C,CAAjB,GAAkE,EAAnE,CAAzB;AACH;;AAzBU,CAAf","sourcesContent":["\r\nexport default {\r\n    /**\r\n         * @name @convertToFormData\r\n         * @description convert data to FormData\r\n         * @requires form data\r\n         * */\r\n\r\n    convertToFormData(form) {\r\n        var bodyFormData = new FormData();\r\n        for (var i in form) {\r\n            if (form[i] instanceof FileList) {\r\n                for (var j in form[i]) {\r\n                    bodyFormData.append(i, form[i][j])\r\n                }\r\n            } else {\r\n                bodyFormData.set(i, form[i]);\r\n            }\r\n        }\r\n        return bodyFormData\r\n    },\r\n    getCookie(cookiename, cookieData) {\r\n        // Get name followed by anything except a semicolon\r\n        var cookiestring = RegExp(cookiename + \"=[^;]+\").exec(cookieData);\r\n        // Return everything after the equal sign, or an empty string if the cookie name not found\r\n        return decodeURIComponent(!!cookiestring ? cookiestring.toString().replace(/^[^=]+./, \"\") : \"\");\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}