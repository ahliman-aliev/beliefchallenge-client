{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _temp,\n    _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\pages\\\\_app.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Provider, connect } from 'react-redux';\nimport App from 'next/app';\nimport Error from 'error'; // import RestoreReduxData from 'common/redux-data'\n\nimport withRedux from 'next-redux-wrapper';\nimport { initStore } from '../redux';\nimport Router from 'next/router';\nimport getObject from 'common/jwt-services';\nimport { reduxdata } from 'redux/action/authAction.js'; // import genericfunctions from 'utilfunction/util-api-service'\n\nimport generalMethods from 'common/general-methods';\nimport { ITEMS_LIMIT } from 'common/config';\nimport { fetchPost, hasPrevUrl, getPostLikes } from 'redux/action/generalAction';\nimport { getCategory } from 'redux/action/categoryAction'; // import axiosinstance from 'common/config.axios'\n\nimport '../assets/scss/main.scss';\nimport Head from 'next/head';\nimport * as Sentry from '@sentry/browser';\nimport { NextSeo, DefaultSeo } from 'next-seo';\nSentry.init({\n  dsn: \"https://7a301d39308c49c08335a86d3f4b1f69@o376432.ingest.sentry.io/5197236\"\n});\nconst AppWrapper = (_temp = class MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    Router.events.on('routeChangeStart', url => {\n      if (url) props.hasPrevUrl(true);else props.hasPrevUrl(false);\n    });\n    return null;\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\n      let abc; // let authData\n\n      let authData = generalMethods.getCookie('authUser', ctx.req.headers.cookie);\n      if (authData) authData = JSON.parse(authData);\n\n      if (!_Object$keys(ctx.store.getState().auth.authUser).length) {\n        if (authData) {\n          ctx.store.dispatch(reduxdata(authData));\n        }\n      }\n    } // }\n\n\n    let {\n      categoryId,\n      search,\n      skip,\n      limit,\n      page\n    } = ctx.query;\n    let queryparams = {\n      params: {\n        url: \"/post\",\n        skip: (page ? +page - 1 : 0) * ITEMS_LIMIT,\n        limit: ITEMS_LIMIT\n      }\n    };\n    if (categoryId) queryparams.params.categoryId = categoryId;\n    if (search) queryparams.params.search = search;\n    let categoryParams = {\n      params: {\n        url: \"/category\"\n      }\n    };\n    let postData = null;\n    let loaded = false;\n\n    if (ctx.pathname == '/home' || ctx.pathname == '/') {\n      postData = await ctx.store.dispatch(fetchPost(queryparams));\n      if (postData.data.statusCode == 200) loaded = true;else loaded = false;\n    }\n\n    return {\n      // postData: postData ? postData.data.response.data : null,\n      count: postData ? postData.data.response.count : null,\n      loaded,\n      pageProps: _objectSpread({}, Component.getInitialProps ? await Component.getInitialProps(ctx) : {})\n    };\n  }\n\n  componentDidMount() {\n    let params = {\n      url: '/likepost'\n    };\n\n    if (this.props.auth.authUser.token) {\n      this.props.getPostLikes(params);\n    }\n\n    let authData = getObject.getObject('authUser');\n\n    if (Router.router.pathname == '/login') {\n      if (authData) {\n        Router.replace('/home');\n      }\n\n      if (Router.router.pathname == '/signup') {\n        if (authData) {\n          Router.replace('/home');\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store,\n      postData,\n      count,\n      fetchPost,\n      loaded\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      href: \"/static/images/favicon.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    })), __jsx(DefaultSeo, {\n      title: \"Belief Challenge\",\n      description: \"What would it take to change your mind?\",\n      canonical: \"https://www.beliefchallenge.com/\",\n      openGraph: {\n        images: [{\n          url: 'https://beliefchallenge.com/static/images/opengraph.jpeg'\n        }]\n      },\n      twitter: {\n        handle: '@beliefchallenge',\n        site: '@beliefchallenge',\n        cardType: 'summary_large_image'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }), __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      count: count,\n      fetchPost: fetchPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}, _temp);\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reduxdata: data => dispatch(reduxdata(data)),\n    fetchPost: data => dispatch(fetchPost(data)),\n    getCategory: data => dispatch(getCategory(data)),\n    hasPrevUrl: data => dispatch(hasPrevUrl(data)),\n    getPostLikes: data => dispatch(getPostLikes(data))\n  };\n};\n\nexport default withRedux(initStore)(connect(mapStateToProps, mapDispatchToProps)(AppWrapper));","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/pages/_app.js"],"names":["Provider","connect","App","Error","withRedux","initStore","Router","getObject","reduxdata","generalMethods","ITEMS_LIMIT","fetchPost","hasPrevUrl","getPostLikes","getCategory","Head","Sentry","NextSeo","DefaultSeo","init","dsn","AppWrapper","MyApp","getDerivedStateFromProps","props","state","events","on","url","getInitialProps","Component","ctx","req","headers","cookie","abc","authData","getCookie","JSON","parse","store","getState","auth","authUser","length","dispatch","categoryId","search","skip","limit","page","query","queryparams","params","categoryParams","postData","loaded","pathname","data","statusCode","count","response","pageProps","componentDidMount","token","router","replace","render","images","handle","site","cardType","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Provider, connect } from 'react-redux';\r\nimport App from 'next/app';\r\nimport Error from 'error';\r\n// import RestoreReduxData from 'common/redux-data'\r\nimport withRedux from 'next-redux-wrapper';\r\nimport { initStore } from '../redux';\r\nimport Router from 'next/router'\r\nimport getObject from 'common/jwt-services'\r\nimport { reduxdata } from 'redux/action/authAction.js'\r\n// import genericfunctions from 'utilfunction/util-api-service'\r\nimport generalMethods from 'common/general-methods'\r\nimport { ITEMS_LIMIT } from 'common/config'\r\nimport { fetchPost, hasPrevUrl, getPostLikes } from 'redux/action/generalAction'\r\nimport { getCategory } from 'redux/action/categoryAction'\r\n// import axiosinstance from 'common/config.axios'\r\n\r\n\r\nimport '../assets/scss/main.scss'\r\nimport Head from 'next/head';\r\nimport * as Sentry from '@sentry/browser';\r\nimport { NextSeo, DefaultSeo } from 'next-seo';\r\n\r\n\r\nSentry.init({dsn: \"https://7a301d39308c49c08335a86d3f4b1f69@o376432.ingest.sentry.io/5197236\"});\r\n\r\nconst AppWrapper =\r\n\r\n    class MyApp extends App {\r\n\r\n        state = {}\r\n\r\n\r\n        static getDerivedStateFromProps(props, state) {\r\n\r\n            Router.events.on('routeChangeStart', (url) => {\r\n                if (url)\r\n                    props.hasPrevUrl(true)\r\n                else\r\n                    props.hasPrevUrl(false)\r\n            })\r\n\r\n            return null\r\n        }\r\n\r\n        static async getInitialProps({ Component, ctx }) {\r\n\r\n\r\n            if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\r\n\r\n                let abc\r\n                // let authData\r\n                let authData = generalMethods.getCookie('authUser', ctx.req.headers.cookie)\r\n                if (authData) authData = JSON.parse(authData)\r\n\r\n                if (!Object.keys(ctx.store.getState().auth.authUser).length) {\r\n                    if (authData) {\r\n                        ctx.store.dispatch(reduxdata(authData))\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            // }\r\n            let { categoryId, search, skip, limit, page } = ctx.query\r\n            let queryparams = {\r\n                params: {\r\n                    url: \"/post\",\r\n                    skip: (page ? (+page - 1) : 0) * ITEMS_LIMIT,\r\n                    limit: ITEMS_LIMIT\r\n                }\r\n            }\r\n\r\n\r\n            if (categoryId) queryparams.params.categoryId = categoryId\r\n            if (search) queryparams.params.search = search\r\n\r\n            let categoryParams = {\r\n                params: {\r\n                    url: \"/category\",\r\n                }\r\n            }\r\n            let postData = null;\r\n            let loaded = false\r\n            if (ctx.pathname == '/home' || ctx.pathname == '/') {\r\n                postData = await ctx.store.dispatch(fetchPost(queryparams))\r\n                if (postData.data.statusCode == 200) loaded = true\r\n                else loaded = false\r\n            }\r\n\r\n            return {\r\n                // postData: postData ? postData.data.response.data : null,\r\n                count: postData ? postData.data.response.count : null,\r\n                loaded,\r\n                pageProps: {\r\n                    ...(Component.getInitialProps\r\n                        ? await Component.getInitialProps(ctx)\r\n                        : {})\r\n                }\r\n            };\r\n\r\n        }\r\n\r\n\r\n        componentDidMount() {\r\n            let params = {\r\n                url: '/likepost'\r\n            }\r\n            if (this.props.auth.authUser.token) {\r\n                this.props.getPostLikes(params)\r\n            }\r\n\r\n\r\n            let authData = getObject.getObject('authUser')\r\n            if (Router.router.pathname == '/login') {\r\n                if (authData) {\r\n                    Router.replace('/home')\r\n                }\r\n                if (Router.router.pathname == '/signup') {\r\n                    if (authData) {\r\n                        Router.replace('/home')\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        render() {\r\n            const { Component, pageProps, store, postData, count, fetchPost, loaded } = this.props;\r\n            return (\r\n                <>\r\n                    <Head>\r\n                        <link rel=\"shortcut icon\" href=\"/static/images/favicon.png\" />\r\n                    </Head>\r\n                        <DefaultSeo\r\n                            title=\"Belief Challenge\"\r\n                            description=\"What would it take to change your mind?\"\r\n                            canonical=\"https://www.beliefchallenge.com/\"\r\n                            openGraph={{\r\n                    images: [\r\n                    {\r\n                        url: 'https://beliefchallenge.com/static/images/opengraph.jpeg',\r\n                    },\r\n                    ],\r\n                            }}\r\n                            twitter={{\r\n                                handle: '@beliefchallenge',\r\n                                site: '@beliefchallenge',\r\n                                cardType: 'summary_large_image',\r\n                            }}\r\n                        />\r\n                    <Provider store={store}>\r\n                        <Component {...pageProps} count={count} fetchPost={fetchPost} />\r\n                    </Provider>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.auth,\r\n    };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        reduxdata: data => dispatch(reduxdata(data)),\r\n        fetchPost: data => dispatch(fetchPost(data)),\r\n        getCategory: data => dispatch(getCategory(data)),\r\n        hasPrevUrl: data => dispatch(hasPrevUrl(data)),\r\n        getPostLikes: data => dispatch(getPostLikes(data))\r\n    };\r\n};\r\n\r\nexport default withRedux(initStore)(connect(mapStateToProps, mapDispatchToProps)(AppWrapper));"]},"metadata":{},"sourceType":"module"}