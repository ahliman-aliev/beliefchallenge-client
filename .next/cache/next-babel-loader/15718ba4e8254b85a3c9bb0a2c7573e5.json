{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport genericfunctions from 'utilfunction/util-api-service';\nimport Router from 'next/router';\nexport const UPDATEPROFILE = \"UPDATEPROFILE\";\nexport const SHOW_MODAL = \"SHOW_MODAL\";\nexport const HAS_PREV_URL = \"HAS_PREV_URL\";\nexport const POSTLIKES = \"POSTLIKES\";\nexport const POSTUNLIKE = \"POSTUNLIKE\";\nexport const POST_DATA = \"POST_DATA\";\nimport setObject from 'common/jwt-services';\nimport generalMethod from 'common/general-methods';\nexport const changepassword = params => dispatch => {\n  return new _Promise((resolve, reject) => {\n    genericfunctions._updateRequest(params.url, params.userData).then(res => {\n      if (res.data.response.status) {\n        resolve(res);\n      } else {\n        resolve(res);\n      }\n    }).catch(err => {\n      reject({\n        message: err\n      });\n    });\n  });\n};\nexport const forgotpassword = params => dispatch => {\n  return new _Promise((resolve, reject) => {\n    genericfunctions._updateRequest(params.url, params.userData).then(res => {\n      resolve(res);\n    }).catch(err => {\n      reject({\n        message: err\n      });\n    });\n  });\n};\nexport const updateprofile = params => dispatch => {\n  return new _Promise((resolve, reject) => {\n    let {\n      token,\n      userId\n    } = params.userData;\n\n    if (params.userData.profilePic.name) {\n      params.userData = generalMethod.convertToFormData(params.userData);\n    }\n\n    genericfunctions._updateRequest(params.url, params.userData).then(res => {\n      if (res.data.response.status) {\n        let {\n          fullName,\n          email,\n          profilePic\n        } = res.data.response.data;\n        let authUser = {\n          token: token,\n          fullName,\n          email,\n          userId: userId,\n          role: 'role',\n          profilePic: profilePic.url ? profilePic.url : profilePic,\n          socialLogin: params.socialLogin\n        };\n        dispatch({\n          type: \"UPDATEPROFILE\",\n          payload: authUser\n        });\n        setObject.setObject('authUser', authUser);\n        resolve(res); // Router.replace('/home')\n      } else {\n        console.log(\"unathorized\");\n      }\n    }).catch(err => {\n      reject({\n        message: err\n      });\n    });\n  });\n};\nexport const fetchPost = params => dispatch => {\n  return new _Promise((resolve, reject) => {\n    genericfunctions._fetchWithParams(params.params.url, params).then(res => {\n      if (res.data && res.data.response && res.data.response.data) {\n        dispatch({\n          type: POST_DATA,\n          payload: res.data.response.data\n        });\n      }\n\n      resolve(res);\n    }).catch(err => {\n      reject({\n        message: err\n      });\n    });\n  });\n};\nexport const updatePostData = params => dispatch => {\n  dispatch({\n    type: POST_DATA,\n    payload: params\n  });\n};\nexport const showModal = params => dispatch => {\n  dispatch({\n    type: \"SHOW_MODAL\",\n    payload: params\n  });\n};\nexport const hasPrevUrl = params => dispatch => {\n  dispatch({\n    type: \"HAS_PREV_URL\",\n    payload: params\n  });\n};\nexport const getPostLikes = params => dispatch => {\n  return new _Promise((resolve, reject) => {\n    genericfunctions._fetchWithOutParams(params.url).then(res => {\n      if (res.data.response.status) {\n        dispatch({\n          type: \"POSTLIKES\",\n          payload: res.data.response.data.postId\n        });\n        resolve(res);\n      }\n    }).catch(err => {\n      reject({\n        message: err\n      });\n    });\n  });\n};\nexport const addPostLike = params => (dispatch, getState) => {\n  return new _Promise((resolve, reject) => {\n    let likesData = getState().general.postLikes;\n\n    if (params.likeFlag == 'add') {\n      likesData.push(params.postId);\n      dispatch({\n        type: \"POSTLIKES\",\n        payload: likesData\n      });\n    } else {\n      let ind = likesData.findIndex(itm => itm == params.postId);\n\n      if (ind > -1) {\n        likesData.splice(ind, 1);\n        dispatch({\n          type: \"POSTLIKES\",\n          payload: likesData\n        });\n      } // dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\n\n    }\n\n    resolve(getState().general.postLikes);\n  });\n};\nexport const removePostLike = params => (dispatch, getState) => {\n  return new _Promise((resolve, reject) => {\n    // genericfunctions._fetchWithOutParams(\"/likepost\").then(({ data }) => {\n    //     console.log(data.response.data, 'mor k')\n    // })\n    let likesData = getState().general.postLikes;\n    console.log(likesData, 'remove');\n\n    if (params.likeFlag == 'remove') {\n      likesData.splice(likesData.indexOf(params.postId), 1);\n      console.log(likesData);\n      dispatch({\n        type: \"POSTUNLIKE\",\n        payload: likesData\n      });\n      resolve(true);\n    }\n  });\n};","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/redux/action/generalAction.js"],"names":["genericfunctions","Router","UPDATEPROFILE","SHOW_MODAL","HAS_PREV_URL","POSTLIKES","POSTUNLIKE","POST_DATA","setObject","generalMethod","changepassword","params","dispatch","resolve","reject","_updateRequest","url","userData","then","res","data","response","status","catch","err","message","forgotpassword","updateprofile","token","userId","profilePic","name","convertToFormData","fullName","email","authUser","role","socialLogin","type","payload","console","log","fetchPost","_fetchWithParams","updatePostData","showModal","hasPrevUrl","getPostLikes","_fetchWithOutParams","postId","addPostLike","getState","likesData","general","postLikes","likeFlag","push","ind","findIndex","itm","splice","removePostLike","indexOf"],"mappings":"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","sourcesContent":["import genericfunctions from 'utilfunction/util-api-service'\r\nimport Router from 'next/router'\r\nexport const UPDATEPROFILE = \"UPDATEPROFILE\"\r\nexport const SHOW_MODAL = \"SHOW_MODAL\"\r\nexport const HAS_PREV_URL = \"HAS_PREV_URL\"\r\nexport const POSTLIKES = \"POSTLIKES\"\r\nexport const POSTUNLIKE = \"POSTUNLIKE\"\r\nexport const POST_DATA = \"POST_DATA\"\r\nimport setObject from 'common/jwt-services'\r\nimport generalMethod from 'common/general-methods'\r\n\r\n\r\nexport const changepassword = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    resolve(res);\r\n                } else {\r\n                    resolve(res);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\nexport const forgotpassword = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\nexport const updateprofile = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let { token, userId } = params.userData\r\n        if (params.userData.profilePic.name) {\r\n            params.userData = generalMethod.convertToFormData(params.userData)\r\n        }\r\n\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    let { fullName, email, profilePic } = res.data.response.data\r\n                    let authUser =\r\n                    {\r\n                        token: token,\r\n                        fullName,\r\n                        email,\r\n                        userId: userId,\r\n                        role: 'role',\r\n                        profilePic: profilePic.url ? profilePic.url : profilePic,\r\n                        socialLogin: params.socialLogin\r\n                    }\r\n                    dispatch({ type: \"UPDATEPROFILE\", payload: authUser })\r\n                    setObject.setObject('authUser', authUser)\r\n                    resolve(res);\r\n                    // Router.replace('/home')\r\n\r\n                } else {\r\n                    console.log(\"unathorized\")\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\n\r\nexport const fetchPost = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._fetchWithParams(params.params.url, params)\r\n            .then(res => {\r\n\r\n                if (res.data && res.data.response && res.data.response.data) {\r\n                    dispatch({ type: POST_DATA, payload: res.data.response.data })\r\n                }\r\n                \r\n                resolve(res)\r\n\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err })\r\n            })\r\n    })\r\n}\r\n\r\nexport const updatePostData = params => dispatch => {\r\n    dispatch({ type: POST_DATA, payload: params })\r\n}\r\n\r\nexport const showModal = params => dispatch => {\r\n    dispatch({ type: \"SHOW_MODAL\", payload: params })\r\n}\r\n\r\nexport const hasPrevUrl = params => dispatch => {\r\n    dispatch({ type: \"HAS_PREV_URL\", payload: params })\r\n}\r\n\r\n\r\nexport const getPostLikes = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._fetchWithOutParams(params.url)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\r\n                    resolve(res)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err })\r\n            })\r\n    })\r\n}\r\n\r\n\r\nexport const addPostLike = params => (dispatch, getState) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let likesData = getState().general.postLikes\r\n        if (params.likeFlag == 'add') {\r\n            likesData.push(params.postId);\r\n            dispatch({ type: \"POSTLIKES\", payload: likesData })\r\n        } else {\r\n            let ind = likesData.findIndex(itm => itm == params.postId)\r\n            if (ind > -1) {\r\n                likesData.splice(ind, 1);\r\n                dispatch({ type: \"POSTLIKES\", payload: likesData })\r\n            }\r\n            // dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\r\n\r\n        }\r\n        resolve(getState().general.postLikes)\r\n    })\r\n}\r\n\r\nexport const removePostLike = params => (dispatch, getState) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        // genericfunctions._fetchWithOutParams(\"/likepost\").then(({ data }) => {\r\n        //     console.log(data.response.data, 'mor k')\r\n        // })\r\n\r\n\r\n        let likesData = getState().general.postLikes\r\n        console.log(likesData, 'remove')\r\n        if (params.likeFlag == 'remove') {\r\n\r\n            likesData.splice(likesData.indexOf(params.postId), 1);\r\n            console.log(likesData)\r\n            dispatch({ type: \"POSTUNLIKE\", payload: likesData })\r\n            resolve(true)\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}