{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\components\\\\post\\\\comment\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport SingleCom from './singleCom';\nimport commentarrow from 'assets/images/commentarrow.png';\nimport genericfunctions from 'utilfunction/util-api-service';\nimport PostComment from './postcomment';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Loader from 'components/loading';\nimport Modal from 'components/common/modal';\n/**\r\n * create by zain ahmed\r\n * created date: 20/12/2019\r\n * class component for see comment and post comment\r\n */\n\nvar Comment = /*#__PURE__*/function (_Component) {\n  _inherits(Comment, _Component);\n\n  var _super = _createSuper(Comment);\n\n  function Comment(props) {\n    var _this;\n\n    _classCallCheck(this, Comment);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchComments\", function (page, newPost) {\n      var self = _assertThisInitialized(_this);\n\n      var itemPerPage = 5;\n\n      if (newPost) {\n        self.setState({\n          commentData: []\n        });\n\n        _this.props.fetchComments();\n      }\n\n      if (page) {\n        var queryparams = {\n          params: {\n            postId: _this.props.postItem._id,\n            createdBy: _this.props.postItem.createdBy,\n            skip: (page - 1) * itemPerPage,\n            limit: itemPerPage\n          }\n        };\n\n        genericfunctions._fetchWithParams(\"/comment\", queryparams).then(function (res) {\n          if (res.data.response.status) {\n            var commentData = self.state.commentData;\n            res.data.response.data.map(function (comment) {\n              commentData.push(comment);\n            });\n            if (res.data.response.data.length) self.setState({\n              commentData: commentData\n            });\n            if (res.data.response.data.length < itemPerPage) self.setState({\n              hasMoreItems: false\n            });\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pushToPost\", function (comment) {\n      var comments = _this.state.commentData;\n      comments.unshift(comment);\n\n      _this.setState({\n        commentData: comments\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showConfirmModal\", function (commentId) {\n      _this.setState({\n        showModal: true,\n        commentId: commentId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteComment\", function () {\n      var userData = {\n        commentId: _this.state.commentId,\n        role: _this.props.auth.authUser.role,\n        userId: _this.props.auth.authUser.userId,\n        socialLogin: _this.props.auth.authUser.socialLogin\n      };\n\n      genericfunctions._deleteRequest(\"/comment\", userData).then(function (res) {\n        _this.setState({\n          showModal: false,\n          commentId: null\n        });\n\n        _this.fetchComments(1, true);\n      });\n    });\n\n    _this.state = {\n      commentData: [],\n      hasMoreItems: true,\n      nextHref: null,\n      // userId: '',\n      isLoggedIn: false,\n      showModal: false,\n      commentId: null\n    };\n    return _this;\n  }\n\n  _createClass(Comment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var authData = this.props.auth.authUser;\n\n      if (authData.token) {\n        this.setState({\n          isLoggedIn: true\n        });\n      }\n    }\n    /**\r\n     * fetch commments function\r\n     * @param {postId(string) limit(number) skip(number)}\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var loader = __jsx(\"div\", {\n        key: \"mango\",\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 24\n        }\n      }, __jsx(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 67\n        }\n      }));\n\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"comment-container border  border-primary m-5\",\n        style: this.state.commentData.length == 0 ? !this.state.isLoggedIn ? {\n          height: 100\n        } : {\n          height: 180\n        } : !this.state.isLoggedIn ? {\n          height: 250\n        } : {\n          height: 340\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, __jsx(\"img\", {\n        src: commentarrow,\n        alt: \"arrow\",\n        className: \"comment-arrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        className: \"totl-comment d-flex pt-10 pl-30 pb-10 border-bottom font-weight-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, \"Comment(\", this.props.commentCount, \")\"), this.state.isLoggedIn && __jsx(PostComment, {\n        postId: this.props.postItem._id,\n        fetchComments: this.fetchComments,\n        pushToPost: this.pushToPost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 47\n        }\n      }), __jsx(\"div\", {\n        className: \"comment-section\",\n        style: this.state.commentData.length == 0 ? {\n          height: 30\n        } : !this.state.isLoggedIn ? {\n          height: '80%'\n        } : {\n          height: '55%'\n        },\n        ref: function ref(_ref) {\n          return _this2.scrollParentRef = _ref;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }, __jsx(InfiniteScroll, {\n        pageStart: 0,\n        loadMore: this.fetchComments.bind(this),\n        hasMore: this.state.hasMoreItems,\n        useWindow: false,\n        getScrollParent: function getScrollParent() {\n          return _this2.scrollParentRef;\n        },\n        key: \"mango1989\",\n        loader: loader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      }, this.state.commentData.length == 0 ? __jsx(\"p\", {\n        className: \"font-weight-bold text-center mb-0 mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 75\n        }\n      }, \"Be the first one to comment!\") : this.state.commentData.map(function (itm, ind) {\n        return __jsx(SingleCom, {\n          auth: _this2.props.auth,\n          itm: itm,\n          key: 'comment-' + itm._id + ind,\n          length: _this2.state.commentData.length,\n          showConfirmModal: _this2.showConfirmModal,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 49\n          }\n        });\n      }))))), this.state.showModal && __jsx(Modal, {\n        showModal: this.state.showModal,\n        triggerModalSuccess: this.deleteComment,\n        triggerModalClose: function triggerModalClose() {\n          return _this2.setState({\n            showModal: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 42\n        }\n      }));\n    }\n  }]);\n\n  return Comment;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n}\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/components/post/comment/index.js"],"names":["React","Component","SingleCom","commentarrow","genericfunctions","PostComment","connect","InfiniteScroll","Loader","Modal","Comment","props","page","newPost","self","itemPerPage","setState","commentData","fetchComments","queryparams","params","postId","postItem","_id","createdBy","skip","limit","_fetchWithParams","then","res","data","response","status","state","map","comment","push","length","hasMoreItems","comments","unshift","commentId","showModal","userData","role","auth","authUser","userId","socialLogin","_deleteRequest","nextHref","isLoggedIn","authData","token","loader","height","commentCount","pushToPost","ref","scrollParentRef","bind","itm","ind","showConfirmModal","deleteComment","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport SingleCom from './singleCom'\r\nimport commentarrow from 'assets/images/commentarrow.png'\r\nimport genericfunctions from 'utilfunction/util-api-service'\r\nimport PostComment from './postcomment'\r\nimport { connect } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport Loader from 'components/loading'\r\nimport Modal from 'components/common/modal';\r\n\r\n/**\r\n * create by zain ahmed\r\n * created date: 20/12/2019\r\n * class component for see comment and post comment\r\n */\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            commentData: [],\r\n            hasMoreItems: true,\r\n            nextHref: null,\r\n            // userId: '',\r\n            isLoggedIn: false,\r\n            showModal: false,\r\n            commentId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let authData = this.props.auth.authUser;\r\n        if (authData.token) {\r\n            this.setState({ isLoggedIn: true })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetch commments function\r\n     * @param {postId(string) limit(number) skip(number)}\r\n     */\r\n    fetchComments = (page, newPost) => {\r\n        let self = this;\r\n        let itemPerPage = 5\r\n        if (newPost) {\r\n            self.setState({\r\n                commentData: [],\r\n            });\r\n            this.props.fetchComments();\r\n        }\r\n            \r\n        if (page) {\r\n            let queryparams = {\r\n                params: {\r\n                    postId: this.props.postItem._id,\r\n                    createdBy: this.props.postItem.createdBy,\r\n\r\n                    skip: (page - 1) * itemPerPage,\r\n                    limit: itemPerPage\r\n                }\r\n            }\r\n\r\n            genericfunctions._fetchWithParams(`/comment`, queryparams).then(res => {\r\n\r\n                if (res.data.response.status) {\r\n\r\n                    var commentData = self.state.commentData;\r\n\r\n                    res.data.response.data.map((comment) => {\r\n\r\n                        commentData.push(comment);\r\n                    });\r\n                    if (res.data.response.data.length)\r\n                        self.setState({\r\n                            commentData: commentData,\r\n                        });\r\n\r\n                    if (res.data.response.data.length < itemPerPage)\r\n                        self.setState({\r\n                            hasMoreItems: false\r\n                        });\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    pushToPost = (comment) => {\r\n        var comments = this.state.commentData;\r\n        comments.unshift(comment);\r\n\r\n        this.setState({\r\n            commentData: comments,\r\n        });\r\n    }\r\n\r\n    showConfirmModal = (commentId) => {\r\n        this.setState({\r\n            showModal: true,\r\n            commentId: commentId\r\n        })\r\n    }\r\n\r\n    /**\r\n     * delete  comment funtion\r\n     * @param {postid(string)}\r\n     */\r\n    deleteComment = () => {\r\n\r\n        let userData = {\r\n            commentId: this.state.commentId,\r\n            role: this.props.auth.authUser.role,\r\n            userId: this.props.auth.authUser.userId,\r\n            socialLogin: this.props.auth.authUser.socialLogin\r\n        }\r\n        genericfunctions._deleteRequest(`/comment`, userData).then(res => {\r\n            this.setState({\r\n                showModal: false,\r\n                commentId: null\r\n            })\r\n            this.fetchComments(1, true)\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const loader = <div key={\"mango\"} className=\"text-center\"><Loader /></div>;\r\n\r\n        return (\r\n            <>\r\n                <div className='comment-container border  border-primary m-5' style={this.state.commentData.length == 0 ?\r\n                    (!this.state.isLoggedIn ?\r\n                        ({ height: 100 }) :\r\n                        ({ height: 180 }))\r\n                    : !this.state.isLoggedIn ?\r\n                        ({ height: 250 }) :\r\n                        ({ height: 340 })}>\r\n\r\n                    <img src={commentarrow} alt='arrow' className='comment-arrow' />\r\n                    <div className='totl-comment d-flex pt-10 pl-30 pb-10 border-bottom font-weight-bold'>\r\n                        Comment({this.props.commentCount})\r\n                        {/* Comment({this.state.commentData.length}) */}\r\n                    </div>\r\n                    {this.state.isLoggedIn && <PostComment postId={this.props.postItem._id} fetchComments={this.fetchComments} pushToPost={this.pushToPost} />}\r\n\r\n\r\n                    <div className='comment-section' style={this.state.commentData.length == 0 ? { height: 30 } : !this.state.isLoggedIn ? ({ height: '80%' }) : ({ height: '55%' })}\r\n                        ref={(ref) => this.scrollParentRef = ref}>\r\n                        <div>\r\n\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.fetchComments.bind(this)}\r\n                                hasMore={this.state.hasMoreItems}\r\n                                useWindow={false}\r\n                                getScrollParent={() => this.scrollParentRef}\r\n                                key={\"mango1989\"}\r\n                                loader={loader}>\r\n                                {\r\n                                    this.state.commentData.length == 0 ? (<p className=\"font-weight-bold text-center mb-0 mt-5\">Be the first one to comment!</p>) : (\r\n                                        this.state.commentData.map((itm, ind) => {\r\n\r\n                                            return (\r\n                                                <SingleCom auth={this.props.auth} itm={itm} key={'comment-' + itm._id + ind} length={this.state.commentData.length} showConfirmModal={this.showConfirmModal} />\r\n                                            )\r\n                                        })\r\n                                    )}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {this.state.showModal && <Modal showModal={this.state.showModal} triggerModalSuccess={this.deleteComment} triggerModalClose={() => this.setState({showModal: false})} />}\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.auth,\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Comment);"]},"metadata":{},"sourceType":"module"}