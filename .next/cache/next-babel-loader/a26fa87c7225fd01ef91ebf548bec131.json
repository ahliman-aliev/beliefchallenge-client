{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\components\\\\post\\\\comment\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport SingleCom from './singleCom';\nimport commentarrow from 'assets/images/commentarrow.png';\nimport genericfunctions from 'utilfunction/util-api-service';\nimport PostComment from './postcomment';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Loader from 'components/loading';\nimport Modal from 'components/common/modal';\n/**\r\n * create by zain ahmed\r\n * created date: 20/12/2019\r\n * class component for see comment and post comment\r\n */\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchComments\", (page, newPost) => {\n      let self = this;\n      let itemPerPage = 5;\n\n      if (newPost) {\n        self.setState({\n          commentData: []\n        });\n        this.props.fetchComments();\n      }\n\n      if (page) {\n        let queryparams = {\n          params: {\n            postId: this.props.postItem._id,\n            createdBy: this.props.postItem.createdBy,\n            skip: (page - 1) * itemPerPage,\n            limit: itemPerPage\n          }\n        };\n\n        genericfunctions._fetchWithParams(`/comment`, queryparams).then(res => {\n          if (res.data.response.status) {\n            var commentData = self.state.commentData;\n            res.data.response.data.map(comment => {\n              commentData.push(comment);\n            });\n            if (res.data.response.data.length) self.setState({\n              commentData: commentData\n            });\n            if (res.data.response.data.length < itemPerPage) self.setState({\n              hasMoreItems: false\n            });\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"pushToPost\", comment => {\n      var comments = this.state.commentData;\n      comments.unshift(comment);\n      this.setState({\n        commentData: comments\n      });\n    });\n\n    _defineProperty(this, \"showConfirmModal\", commentId => {\n      this.setState({\n        showModal: true,\n        commentId: commentId\n      });\n    });\n\n    _defineProperty(this, \"deleteComment\", () => {\n      let userData = {\n        commentId: this.state.commentId,\n        role: this.props.auth.authUser.role,\n        userId: this.props.auth.authUser.userId,\n        socialLogin: this.props.auth.authUser.socialLogin\n      };\n\n      genericfunctions._deleteRequest(`/comment`, userData).then(res => {\n        this.setState({\n          showModal: false,\n          commentId: null\n        });\n        this.fetchComments(1, true);\n      });\n    });\n\n    this.state = {\n      commentData: [],\n      hasMoreItems: true,\n      nextHref: null,\n      // userId: '',\n      isLoggedIn: false,\n      showModal: false,\n      commentId: null\n    };\n  }\n\n  componentDidMount() {\n    let authData = this.props.auth.authUser;\n\n    if (authData.token) {\n      this.setState({\n        isLoggedIn: true\n      });\n    }\n  }\n  /**\r\n   * fetch commments function\r\n   * @param {postId(string) limit(number) skip(number)}\r\n   */\n\n\n  render() {\n    const loader = __jsx(\"div\", {\n      key: \"mango\",\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }\n    }, __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 67\n      }\n    }));\n\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"comment-container border  border-primary m-5\",\n      style: this.state.commentData.length == 0 ? !this.state.isLoggedIn ? {\n        height: 100\n      } : {\n        height: 180\n      } : !this.state.isLoggedIn ? {\n        height: 250\n      } : {\n        height: 340\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      src: commentarrow,\n      alt: \"arrow\",\n      className: \"comment-arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      className: \"totl-comment d-flex pt-10 pl-30 pb-10 border-bottom font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, \"Comment(\", this.props.commentCount, \")\"), this.state.isLoggedIn && __jsx(PostComment, {\n      postId: this.props.postItem._id,\n      fetchComments: this.fetchComments,\n      pushToPost: this.pushToPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 47\n      }\n    }), __jsx(\"div\", {\n      className: \"comment-section\",\n      style: this.state.commentData.length == 0 ? {\n        height: 30\n      } : !this.state.isLoggedIn ? {\n        height: '80%'\n      } : {\n        height: '55%'\n      },\n      ref: ref => this.scrollParentRef = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, __jsx(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: this.fetchComments.bind(this),\n      hasMore: this.state.hasMoreItems,\n      useWindow: false,\n      getScrollParent: () => this.scrollParentRef,\n      key: \"mango1989\",\n      loader: loader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    }, this.state.commentData.length == 0 ? __jsx(\"p\", {\n      className: \"font-weight-bold text-center mb-0 mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 75\n      }\n    }, \"Be the first one to comment!\") : this.state.commentData.map((itm, ind) => {\n      return __jsx(SingleCom, {\n        auth: this.props.auth,\n        itm: itm,\n        key: 'comment-' + itm._id + ind,\n        length: this.state.commentData.length,\n        showConfirmModal: this.showConfirmModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 49\n        }\n      });\n    }))))), this.state.showModal && __jsx(Modal, {\n      showModal: this.state.showModal,\n      triggerModalSuccess: this.deleteComment,\n      triggerModalClose: () => this.setState({\n        showModal: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 42\n      }\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n}\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/components/post/comment/index.js"],"names":["React","Component","SingleCom","commentarrow","genericfunctions","PostComment","connect","InfiniteScroll","Loader","Modal","Comment","constructor","props","page","newPost","self","itemPerPage","setState","commentData","fetchComments","queryparams","params","postId","postItem","_id","createdBy","skip","limit","_fetchWithParams","then","res","data","response","status","state","map","comment","push","length","hasMoreItems","comments","unshift","commentId","showModal","userData","role","auth","authUser","userId","socialLogin","_deleteRequest","nextHref","isLoggedIn","componentDidMount","authData","token","render","loader","height","commentCount","pushToPost","ref","scrollParentRef","bind","itm","ind","showConfirmModal","deleteComment","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport SingleCom from './singleCom'\r\nimport commentarrow from 'assets/images/commentarrow.png'\r\nimport genericfunctions from 'utilfunction/util-api-service'\r\nimport PostComment from './postcomment'\r\nimport { connect } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport Loader from 'components/loading'\r\nimport Modal from 'components/common/modal';\r\n\r\n/**\r\n * create by zain ahmed\r\n * created date: 20/12/2019\r\n * class component for see comment and post comment\r\n */\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            commentData: [],\r\n            hasMoreItems: true,\r\n            nextHref: null,\r\n            // userId: '',\r\n            isLoggedIn: false,\r\n            showModal: false,\r\n            commentId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let authData = this.props.auth.authUser;\r\n        if (authData.token) {\r\n            this.setState({ isLoggedIn: true })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetch commments function\r\n     * @param {postId(string) limit(number) skip(number)}\r\n     */\r\n    fetchComments = (page, newPost) => {\r\n        let self = this;\r\n        let itemPerPage = 5\r\n        if (newPost) {\r\n            self.setState({\r\n                commentData: [],\r\n            });\r\n            this.props.fetchComments();\r\n        }\r\n            \r\n        if (page) {\r\n            let queryparams = {\r\n                params: {\r\n                    postId: this.props.postItem._id,\r\n                    createdBy: this.props.postItem.createdBy,\r\n\r\n                    skip: (page - 1) * itemPerPage,\r\n                    limit: itemPerPage\r\n                }\r\n            }\r\n\r\n            genericfunctions._fetchWithParams(`/comment`, queryparams).then(res => {\r\n\r\n                if (res.data.response.status) {\r\n\r\n                    var commentData = self.state.commentData;\r\n\r\n                    res.data.response.data.map((comment) => {\r\n\r\n                        commentData.push(comment);\r\n                    });\r\n                    if (res.data.response.data.length)\r\n                        self.setState({\r\n                            commentData: commentData,\r\n                        });\r\n\r\n                    if (res.data.response.data.length < itemPerPage)\r\n                        self.setState({\r\n                            hasMoreItems: false\r\n                        });\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    pushToPost = (comment) => {\r\n        var comments = this.state.commentData;\r\n        comments.unshift(comment);\r\n\r\n        this.setState({\r\n            commentData: comments,\r\n        });\r\n    }\r\n\r\n    showConfirmModal = (commentId) => {\r\n        this.setState({\r\n            showModal: true,\r\n            commentId: commentId\r\n        })\r\n    }\r\n\r\n    /**\r\n     * delete  comment funtion\r\n     * @param {postid(string)}\r\n     */\r\n    deleteComment = () => {\r\n\r\n        let userData = {\r\n            commentId: this.state.commentId,\r\n            role: this.props.auth.authUser.role,\r\n            userId: this.props.auth.authUser.userId,\r\n            socialLogin: this.props.auth.authUser.socialLogin\r\n        }\r\n        genericfunctions._deleteRequest(`/comment`, userData).then(res => {\r\n            this.setState({\r\n                showModal: false,\r\n                commentId: null\r\n            })\r\n            this.fetchComments(1, true)\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const loader = <div key={\"mango\"} className=\"text-center\"><Loader /></div>;\r\n\r\n        return (\r\n            <>\r\n                <div className='comment-container border  border-primary m-5' style={this.state.commentData.length == 0 ?\r\n                    (!this.state.isLoggedIn ?\r\n                        ({ height: 100 }) :\r\n                        ({ height: 180 }))\r\n                    : !this.state.isLoggedIn ?\r\n                        ({ height: 250 }) :\r\n                        ({ height: 340 })}>\r\n\r\n                    <img src={commentarrow} alt='arrow' className='comment-arrow' />\r\n                    <div className='totl-comment d-flex pt-10 pl-30 pb-10 border-bottom font-weight-bold'>\r\n                        Comment({this.props.commentCount})\r\n                        {/* Comment({this.state.commentData.length}) */}\r\n                    </div>\r\n                    {this.state.isLoggedIn && <PostComment postId={this.props.postItem._id} fetchComments={this.fetchComments} pushToPost={this.pushToPost} />}\r\n\r\n\r\n                    <div className='comment-section' style={this.state.commentData.length == 0 ? { height: 30 } : !this.state.isLoggedIn ? ({ height: '80%' }) : ({ height: '55%' })}\r\n                        ref={(ref) => this.scrollParentRef = ref}>\r\n                        <div>\r\n\r\n                            <InfiniteScroll\r\n                                pageStart={0}\r\n                                loadMore={this.fetchComments.bind(this)}\r\n                                hasMore={this.state.hasMoreItems}\r\n                                useWindow={false}\r\n                                getScrollParent={() => this.scrollParentRef}\r\n                                key={\"mango1989\"}\r\n                                loader={loader}>\r\n                                {\r\n                                    this.state.commentData.length == 0 ? (<p className=\"font-weight-bold text-center mb-0 mt-5\">Be the first one to comment!</p>) : (\r\n                                        this.state.commentData.map((itm, ind) => {\r\n\r\n                                            return (\r\n                                                <SingleCom auth={this.props.auth} itm={itm} key={'comment-' + itm._id + ind} length={this.state.commentData.length} showConfirmModal={this.showConfirmModal} />\r\n                                            )\r\n                                        })\r\n                                    )}\r\n                            </InfiniteScroll>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {this.state.showModal && <Modal showModal={this.state.showModal} triggerModalSuccess={this.deleteComment} triggerModalClose={() => this.setState({showModal: false})} />}\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.auth,\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Comment);"]},"metadata":{},"sourceType":"module"}