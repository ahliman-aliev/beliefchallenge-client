{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _temp,\n    _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\pages\\\\_app.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Provider, connect } from 'react-redux';\nimport App from 'next/app';\nimport Error from 'error'; // import RestoreReduxData from 'common/redux-data'\n\nimport withRedux from 'next-redux-wrapper';\nimport { initStore } from '../redux';\nimport Router from 'next/router';\nimport getObject from 'common/jwt-services';\nimport { reduxdata as _reduxdata } from 'redux/action/authAction.js'; // import genericfunctions from 'utilfunction/util-api-service'\n\nimport generalMethods from 'common/general-methods';\nimport { ITEMS_LIMIT } from 'common/config';\nimport { fetchPost as _fetchPost, hasPrevUrl as _hasPrevUrl, getPostLikes as _getPostLikes } from 'redux/action/generalAction';\nimport { getCategory as _getCategory } from 'redux/action/categoryAction'; // import axiosinstance from 'common/config.axios'\n\nimport '../assets/scss/main.scss';\nimport Head from 'next/head';\nimport * as Sentry from '@sentry/browser';\nimport { NextSeo, DefaultSeo } from 'next-seo';\nSentry.init({\n  dsn: \"https://7a301d39308c49c08335a86d3f4b1f69@o376432.ingest.sentry.io/5197236\"\n});\nvar AppWrapper = (_temp = /*#__PURE__*/function (_App) {\n  _inherits(MyApp, _App);\n\n  var _super = _createSuper(MyApp);\n\n  function MyApp() {\n    var _this;\n\n    _classCallCheck(this, MyApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    return _this;\n  }\n\n  _createClass(MyApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = {\n        url: '/likepost'\n      };\n\n      if (this.props.auth.authUser.token) {\n        this.props.getPostLikes(params);\n      }\n\n      var authData = getObject.getObject('authUser');\n\n      if (Router.router.pathname == '/login') {\n        if (authData) {\n          Router.replace('/home');\n        }\n\n        if (Router.router.pathname == '/signup') {\n          if (authData) {\n            Router.replace('/home');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store,\n          postData = _this$props.postData,\n          count = _this$props.count,\n          fetchPost = _this$props.fetchPost,\n          loaded = _this$props.loaded;\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, __jsx(\"link\", {\n        rel: \"shortcut icon\",\n        href: \"/static/images/favicon.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      })), __jsx(DefaultSeo, {\n        title: \"Belief Challenge\",\n        description: \"What would it take to change your mind?\",\n        canonical: \"https://www.beliefchallenge.com/\",\n        openGraph: {\n          images: [{\n            url: 'https://beliefchallenge.com/static/images/opengraph.jpeg'\n          }]\n        },\n        twitter: {\n          handle: '@beliefchallenge',\n          site: '@beliefchallenge',\n          cardType: 'summary_large_image'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }), __jsx(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, __jsx(Component, _extends({}, pageProps, {\n        count: count,\n        fetchPost: fetchPost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      Router.events.on('routeChangeStart', function (url) {\n        if (url) props.hasPrevUrl(true);else props.hasPrevUrl(false);\n      });\n      return null;\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var Component, ctx, abc, authData, _ctx$query, categoryId, search, skip, limit, page, queryparams, categoryParams, postData, loaded;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Component = _ref.Component, ctx = _ref.ctx;\n\n                if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\n                  // let authData\n                  authData = generalMethods.getCookie('authUser', ctx.req.headers.cookie);\n                  if (authData) authData = JSON.parse(authData);\n\n                  if (!_Object$keys(ctx.store.getState().auth.authUser).length) {\n                    if (authData) {\n                      ctx.store.dispatch(_reduxdata(authData));\n                    }\n                  }\n                } // }\n\n\n                _ctx$query = ctx.query, categoryId = _ctx$query.categoryId, search = _ctx$query.search, skip = _ctx$query.skip, limit = _ctx$query.limit, page = _ctx$query.page;\n                queryparams = {\n                  params: {\n                    url: \"/post\",\n                    skip: (page ? +page - 1 : 0) * ITEMS_LIMIT,\n                    limit: ITEMS_LIMIT\n                  }\n                };\n                if (categoryId) queryparams.params.categoryId = categoryId;\n                if (search) queryparams.params.search = search;\n                categoryParams = {\n                  params: {\n                    url: \"/category\"\n                  }\n                };\n                postData = null;\n                loaded = false;\n\n                if (!(ctx.pathname == '/home' || ctx.pathname == '/')) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 12;\n                return ctx.store.dispatch(_fetchPost(queryparams));\n\n              case 12:\n                postData = _context.sent;\n                if (postData.data.statusCode == 200) loaded = true;else loaded = false;\n\n              case 14:\n                _context.t0 = postData ? postData.data.response.count : null;\n                _context.t1 = loaded;\n                _context.t2 = _objectSpread;\n                _context.t3 = {};\n\n                if (!Component.getInitialProps) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.next = 21;\n                return Component.getInitialProps(ctx);\n\n              case 21:\n                _context.t4 = _context.sent;\n                _context.next = 25;\n                break;\n\n              case 24:\n                _context.t4 = {};\n\n              case 25:\n                _context.t5 = _context.t4;\n                _context.t6 = (0, _context.t2)(_context.t3, _context.t5);\n                return _context.abrupt(\"return\", {\n                  count: _context.t0,\n                  loaded: _context.t1,\n                  pageProps: _context.t6\n                });\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return MyApp;\n}(App), _temp);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    reduxdata: function reduxdata(data) {\n      return dispatch(_reduxdata(data));\n    },\n    fetchPost: function fetchPost(data) {\n      return dispatch(_fetchPost(data));\n    },\n    getCategory: function getCategory(data) {\n      return dispatch(_getCategory(data));\n    },\n    hasPrevUrl: function hasPrevUrl(data) {\n      return dispatch(_hasPrevUrl(data));\n    },\n    getPostLikes: function getPostLikes(data) {\n      return dispatch(_getPostLikes(data));\n    }\n  };\n};\n\nexport default withRedux(initStore)(connect(mapStateToProps, mapDispatchToProps)(AppWrapper));","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/pages/_app.js"],"names":["Provider","connect","App","Error","withRedux","initStore","Router","getObject","reduxdata","generalMethods","ITEMS_LIMIT","fetchPost","hasPrevUrl","getPostLikes","getCategory","Head","Sentry","NextSeo","DefaultSeo","init","dsn","AppWrapper","params","url","props","auth","authUser","token","authData","router","pathname","replace","Component","pageProps","store","postData","count","loaded","images","handle","site","cardType","state","events","on","ctx","req","headers","cookie","getCookie","JSON","parse","getState","length","dispatch","query","categoryId","search","skip","limit","page","queryparams","categoryParams","data","statusCode","response","getInitialProps","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { Provider, connect } from 'react-redux';\r\nimport App from 'next/app';\r\nimport Error from 'error';\r\n// import RestoreReduxData from 'common/redux-data'\r\nimport withRedux from 'next-redux-wrapper';\r\nimport { initStore } from '../redux';\r\nimport Router from 'next/router'\r\nimport getObject from 'common/jwt-services'\r\nimport { reduxdata } from 'redux/action/authAction.js'\r\n// import genericfunctions from 'utilfunction/util-api-service'\r\nimport generalMethods from 'common/general-methods'\r\nimport { ITEMS_LIMIT } from 'common/config'\r\nimport { fetchPost, hasPrevUrl, getPostLikes } from 'redux/action/generalAction'\r\nimport { getCategory } from 'redux/action/categoryAction'\r\n// import axiosinstance from 'common/config.axios'\r\n\r\n\r\nimport '../assets/scss/main.scss'\r\nimport Head from 'next/head';\r\nimport * as Sentry from '@sentry/browser';\r\nimport { NextSeo, DefaultSeo } from 'next-seo';\r\n\r\n\r\nSentry.init({dsn: \"https://7a301d39308c49c08335a86d3f4b1f69@o376432.ingest.sentry.io/5197236\"});\r\n\r\nconst AppWrapper =\r\n\r\n    class MyApp extends App {\r\n\r\n        state = {}\r\n\r\n\r\n        static getDerivedStateFromProps(props, state) {\r\n\r\n            Router.events.on('routeChangeStart', (url) => {\r\n                if (url)\r\n                    props.hasPrevUrl(true)\r\n                else\r\n                    props.hasPrevUrl(false)\r\n            })\r\n\r\n            return null\r\n        }\r\n\r\n        static async getInitialProps({ Component, ctx }) {\r\n\r\n\r\n            if (ctx.req && ctx.req.headers && ctx.req.headers.cookie) {\r\n\r\n                let abc\r\n                // let authData\r\n                let authData = generalMethods.getCookie('authUser', ctx.req.headers.cookie)\r\n                if (authData) authData = JSON.parse(authData)\r\n\r\n                if (!Object.keys(ctx.store.getState().auth.authUser).length) {\r\n                    if (authData) {\r\n                        ctx.store.dispatch(reduxdata(authData))\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            // }\r\n            let { categoryId, search, skip, limit, page } = ctx.query\r\n            let queryparams = {\r\n                params: {\r\n                    url: \"/post\",\r\n                    skip: (page ? (+page - 1) : 0) * ITEMS_LIMIT,\r\n                    limit: ITEMS_LIMIT\r\n                }\r\n            }\r\n\r\n\r\n            if (categoryId) queryparams.params.categoryId = categoryId\r\n            if (search) queryparams.params.search = search\r\n\r\n            let categoryParams = {\r\n                params: {\r\n                    url: \"/category\",\r\n                }\r\n            }\r\n            let postData = null;\r\n            let loaded = false\r\n            if (ctx.pathname == '/home' || ctx.pathname == '/') {\r\n                postData = await ctx.store.dispatch(fetchPost(queryparams))\r\n                if (postData.data.statusCode == 200) loaded = true\r\n                else loaded = false\r\n            }\r\n\r\n            return {\r\n                // postData: postData ? postData.data.response.data : null,\r\n                count: postData ? postData.data.response.count : null,\r\n                loaded,\r\n                pageProps: {\r\n                    ...(Component.getInitialProps\r\n                        ? await Component.getInitialProps(ctx)\r\n                        : {})\r\n                }\r\n            };\r\n\r\n        }\r\n\r\n\r\n        componentDidMount() {\r\n            let params = {\r\n                url: '/likepost'\r\n            }\r\n            if (this.props.auth.authUser.token) {\r\n                this.props.getPostLikes(params)\r\n            }\r\n\r\n\r\n            let authData = getObject.getObject('authUser')\r\n            if (Router.router.pathname == '/login') {\r\n                if (authData) {\r\n                    Router.replace('/home')\r\n                }\r\n                if (Router.router.pathname == '/signup') {\r\n                    if (authData) {\r\n                        Router.replace('/home')\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        render() {\r\n            const { Component, pageProps, store, postData, count, fetchPost, loaded } = this.props;\r\n            return (\r\n                <>\r\n                    <Head>\r\n                        <link rel=\"shortcut icon\" href=\"/static/images/favicon.png\" />\r\n                    </Head>\r\n                        <DefaultSeo\r\n                            title=\"Belief Challenge\"\r\n                            description=\"What would it take to change your mind?\"\r\n                            canonical=\"https://www.beliefchallenge.com/\"\r\n                            openGraph={{\r\n                    images: [\r\n                    {\r\n                        url: 'https://beliefchallenge.com/static/images/opengraph.jpeg',\r\n                    },\r\n                    ],\r\n                            }}\r\n                            twitter={{\r\n                                handle: '@beliefchallenge',\r\n                                site: '@beliefchallenge',\r\n                                cardType: 'summary_large_image',\r\n                            }}\r\n                        />\r\n                    <Provider store={store}>\r\n                        <Component {...pageProps} count={count} fetchPost={fetchPost} />\r\n                    </Provider>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        auth: state.auth,\r\n    };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        reduxdata: data => dispatch(reduxdata(data)),\r\n        fetchPost: data => dispatch(fetchPost(data)),\r\n        getCategory: data => dispatch(getCategory(data)),\r\n        hasPrevUrl: data => dispatch(hasPrevUrl(data)),\r\n        getPostLikes: data => dispatch(getPostLikes(data))\r\n    };\r\n};\r\n\r\nexport default withRedux(initStore)(connect(mapStateToProps, mapDispatchToProps)(AppWrapper));"]},"metadata":{},"sourceType":"module"}