{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\components\\\\post\\\\comment\\\\postcomment.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport profilelogo from 'assets/images/profilelogo.png';\nimport commentsend from 'assets/images/commentsend.png';\nimport genericfunctions from 'utilfunction/util-api-service';\nimport { connect } from 'react-redux';\nimport Loader from 'components/loading';\nimport getObject from 'common/jwt-services';\n/**\r\n * created by zain ahmed\r\n * created date: 18/12/2019\r\n * class componen for create comment on single post\r\n */\n\nvar postComment = /*#__PURE__*/function (_Component) {\n  _inherits(postComment, _Component);\n\n  var _super = _createSuper(postComment);\n\n  function postComment() {\n    var _this;\n\n    _classCallCheck(this, postComment);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"postCommenthandle\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$state, commentContent, user_profile, params;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, commentContent = _this$state.commentContent, user_profile = _this$state.user_profile;\n\n              _this.setState({\n                loader: true\n              });\n\n              params = {\n                content: commentContent,\n                postId: _this.props.postId,\n                createdBy: _this.props.auth.userId,\n                socialLogin: _this.props.auth.socialLogin\n              };\n\n              if (commentContent.length <= 0) {\n                console.log(\"please fill the field\");\n              } else {\n                genericfunctions._postRequest('/comment', params).then(function (res) {\n                  var obj = {\n                    content: commentContent,\n                    user_profile: {\n                      fullName: user_profile.fullName,\n                      email: user_profile.email,\n                      profilePic: {\n                        url: user_profile.profilePic\n                      }\n                    }\n                  }; // this.props.pushToPost(obj)\n\n                  _this.setState({\n                    commentContent: '',\n                    loader: false\n                  });\n\n                  _this.props.fetchComments(1, true);\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"txtHandle\", function (e) {\n      _this.setState({\n        commentContent: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnterPress\", function (e) {\n      if (e.keyCode == 13 && e.shiftKey == false) {\n        e.preventDefault();\n\n        _this.setState({\n          loader: true\n        });\n\n        var _this$state2 = _this.state,\n            commentContent = _this$state2.commentContent,\n            user_profile = _this$state2.user_profile;\n        var params = {\n          content: commentContent,\n          postId: _this.props.postId,\n          createdBy: _this.props.auth.userId,\n          socialLogin: _this.props.auth.socialLogin\n        };\n\n        if (commentContent.length <= 0) {\n          console.log(\"please fill the field\");\n        } else {\n          genericfunctions._postRequest('/comment', params).then(function (res) {\n            var obj = {\n              content: commentContent,\n              user_profile: {\n                fullName: user_profile.fullName,\n                email: user_profile.email,\n                profilePic: {\n                  url: user_profile.profilePic\n                }\n              }\n            }; // this.props.pushToPost(obj)\n\n            _this.setState({\n              commentContent: '',\n              loader: false\n            });\n\n            _this.props.fetchComments(1, true);\n          });\n        } // this.postCommet.submit();\n\n      }\n    });\n\n    _this.state = {\n      commentContent: '',\n      loader: false,\n      user_profile: JSON.parse(getObject.getObject('authUser'))\n    };\n    return _this;\n  }\n  /**\r\n   * function for create/post commont\r\n   * @param {commentContent(string) postId(string) createdBy(string)}\r\n   */\n\n\n  _createClass(postComment, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          commentContent = _this$state3.commentContent,\n          loader = _this$state3.loader;\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"send-comment-main d-flex pt-10 pl-20 pr-10 pb-10 border-bottom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, __jsx(\"form\", {\n        ref: function ref(el) {\n          return _this2.postCommet = el;\n        },\n        className: \"d-flex bd-highlight w-100 align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: \"profile-pic bd-highlight\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }, __jsx(\"img\", {\n        src: this.props.auth.profilePic ? this.props.auth.profilePic : profilelogo,\n        className: \"rounded-circle img-fluid\",\n        alt: \"profilelogo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      })), __jsx(\"div\", {\n        className: \"p-2 flex-grow-1 bd-highlight\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"post-comment h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      }, __jsx(\"textarea\", {\n        onKeyDown: this.onEnterPress,\n        onChange: this.txtHandle,\n        value: commentContent,\n        type: \"string\",\n        className: \"form-control h-100\",\n        \"aria-describedby\": \"comment\",\n        placeholder: \"Write a Comment\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }\n      }))), __jsx(\"div\", {\n        className: \"p-2 cursor-pointer bd-highlight\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"commentsend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }\n      }, __jsx(\"img\", {\n        src: commentsend,\n        alt: \"commentsend\",\n        onClick: this.postCommenthandle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 33\n        }\n      }))))), loader && __jsx(\"div\", {\n        className: \"text-center mt-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 28\n        }\n      }, __jsx(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return postComment;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.auth.authUser\n  };\n}\n\nexport default connect(mapStateToProps)(postComment);","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/components/post/comment/postcomment.js"],"names":["React","Component","profilelogo","commentsend","genericfunctions","connect","Loader","getObject","postComment","state","commentContent","user_profile","setState","loader","params","content","postId","props","createdBy","auth","userId","socialLogin","length","console","log","_postRequest","then","res","obj","fullName","email","profilePic","url","fetchComments","e","target","value","keyCode","shiftKey","preventDefault","JSON","parse","el","postCommet","onEnterPress","txtHandle","postCommenthandle","mapStateToProps","authUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport profilelogo from 'assets/images/profilelogo.png'\r\nimport commentsend from 'assets/images/commentsend.png'\r\nimport genericfunctions from 'utilfunction/util-api-service'\r\nimport { connect } from 'react-redux';\r\nimport Loader from 'components/loading'\r\nimport getObject from 'common/jwt-services'\r\n\r\n\r\n/**\r\n * created by zain ahmed\r\n * created date: 18/12/2019\r\n * class componen for create comment on single post\r\n */\r\nclass postComment extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            commentContent: '',\r\n            loader: false,\r\n            user_profile: JSON.parse(getObject.getObject('authUser'))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * function for create/post commont\r\n     * @param {commentContent(string) postId(string) createdBy(string)}\r\n     */\r\n    postCommenthandle = async () => {\r\n        let { commentContent, user_profile } = this.state\r\n        this.setState({ loader: true })\r\n\r\n        let params = {\r\n            content: commentContent, postId: this.props.postId,\r\n            createdBy: this.props.auth.userId,\r\n            socialLogin: this.props.auth.socialLogin\r\n        }\r\n\r\n\r\n        if (commentContent.length <= 0) {\r\n            console.log(\"please fill the field\")\r\n        } else {\r\n            genericfunctions._postRequest('/comment', params).then(res => {\r\n                let obj = {\r\n                    content: commentContent,\r\n                    user_profile: {\r\n                        fullName: user_profile.fullName,\r\n                        email: user_profile.email,\r\n                        profilePic: {\r\n                            url: user_profile.profilePic\r\n                        }\r\n                    }\r\n                }\r\n                // this.props.pushToPost(obj)\r\n                this.setState({ commentContent: '', loader: false })\r\n                this.props.fetchComments(1, true)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    txtHandle = (e) => {\r\n        this.setState({ commentContent: e.target.value })\r\n    }\r\n\r\n    onEnterPress = (e) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            e.preventDefault();\r\n            this.setState({ loader: true })\r\n            let { commentContent, user_profile } = this.state\r\n            let params = { content: commentContent, postId: this.props.postId, createdBy: this.props.auth.userId, socialLogin: this.props.auth.socialLogin }\r\n\r\n            if (commentContent.length <= 0) {\r\n                console.log(\"please fill the field\")\r\n            } else {\r\n                genericfunctions._postRequest('/comment', params).then(res => {\r\n\r\n                    let obj = {\r\n                        content: commentContent,\r\n                        user_profile: {\r\n                            fullName: user_profile.fullName,\r\n                            email: user_profile.email,\r\n                            profilePic: {\r\n                                url: user_profile.profilePic\r\n                            }\r\n                        }\r\n                    }\r\n                    // this.props.pushToPost(obj)\r\n                    this.setState({ commentContent: '', loader: false })\r\n                    this.props.fetchComments(1, true)\r\n                })\r\n            }\r\n            // this.postCommet.submit();\r\n        }\r\n    }\r\n    render() {\r\n        let { commentContent, loader } = this.state\r\n\r\n        return (\r\n            <>\r\n                <div className='send-comment-main d-flex pt-10 pl-20 pr-10 pb-10 border-bottom' >\r\n\r\n                    <form ref={el => this.postCommet = el} className='d-flex bd-highlight w-100 align-items-center'>\r\n                        <div className=\"profile-pic bd-highlight\">\r\n                            <img src={this.props.auth.profilePic ? this.props.auth.profilePic : profilelogo} className=\"rounded-circle img-fluid\" alt=\"profilelogo\" />\r\n                        </div>\r\n                        <div className=\"p-2 flex-grow-1 bd-highlight\">\r\n                            <div className=\"post-comment h-100\">\r\n                                {/* <input onChange={this.txtHandle} value={commentContent} type=\"string\" className=\"form-control h-100\" aria-describedby=\"comment\" placeholder=\"Write a Comment\" /> */}\r\n                                <textarea onKeyDown={this.onEnterPress} onChange={this.txtHandle} value={commentContent} type=\"string\" className=\"form-control h-100\" aria-describedby=\"comment\" placeholder=\"Write a Comment\" ></textarea>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"p-2 cursor-pointer bd-highlight\">\r\n                            <div className=\"commentsend\">\r\n\r\n                                <img src={commentsend} alt=\"commentsend\" onClick={this.postCommenthandle} />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                {loader && <div className=\"text-center mt-2\">\r\n                    <Loader />\r\n                </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.auth.authUser,\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(postComment);"]},"metadata":{},"sourceType":"module"}