{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"F:\\\\beliefchallenge\\\\beliefchallenge_client\\\\components\\\\post\\\\createpost\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport genericfunctions from 'utilfunction/util-api-service';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { ITEMS_LIMIT } from 'common/config';\nimport { getCategory } from 'redux/action/categoryAction';\nimport { fetchPost } from 'redux/action/generalAction';\nimport Router from 'next/router';\nimport Loader from 'components/loading'; // import {fetchPost} from 'redux/action/generalAction'\n\n/**\r\n * created by zain ahmed\r\n * created date 22/12/2019\r\n * class component for created post \r\n */\n\nconst customStyles = {\n  option: (provided, state) => {\n    return _objectSpread({}, provided, {\n      // borderBottom: '1px dotted #ffffff',\n      color: state.isSelected ? 'white' : 'black',\n      backgroundColor: state.isFocused ? \"#464444\" : state.isSelected ? \"#464444\" : null,\n      '&:hover': {\n        background: \"#464444\",\n        color: 'white'\n      },\n      '&:focus': {\n        background: \"#464444\",\n        color: 'white'\n      },\n      padding: 10\n    });\n  }\n};\n\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchCategoryFN\", () => {// let { categoryData } = this.state;\n      // let categoryParams = {\n      //     params: {\n      //         url: \"/category\",\n      //     }\n      // }\n      // console.log(this.props.categoryData)\n      // this.props.categoryData.data.map(itm => {\n      //     return (\n      //         categoryData.push({ value: itm._id, label: itm.title })\n      //     )\n      // })\n      // this.props.getCategory(categoryParams).then(res => {\n      //     console.log(res)\n      // })\n      // genericfunctions._fetchWithOutParams('/category').then(res => {\n      //     res.data.response.data.map(itm => {\n      //         return (\n      //             categoryData.push({ value: itm._id, label: itm.title })\n      //         )\n      //     })\n      //     this.setState({ categoryData })\n      // })\n    });\n\n    _defineProperty(this, \"textChangeHandle\", (e, key) => {\n      this.setState({\n        [key]: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"postPostFN\", async () => {\n      let {\n        selectedCategory,\n        postQuestion,\n        postOption1,\n        postOption2,\n        postOption3\n      } = this.state; // || postOption2.length <= 0 || postOption3.length <= 0\n\n      if (postQuestion.length <= 0 || postOption1.length <= 0 || !selectedCategory.value) {\n        this.setState({\n          errorMessage: \"please fill all fields\"\n        });\n      } else {\n        let postData = {\n          userId: this.props.auth.authUser.userId,\n          categoryId: selectedCategory.value,\n          postQuestion,\n          options: [postOption1, postOption2, postOption3],\n          socialLogin: this.props.auth.authUser.socialLogin\n        };\n        this.setState({\n          Loading: true,\n          errorMessage: ''\n        });\n\n        genericfunctions._postRequest('/post', postData).then(res => {\n          if (res.data.response.status) {\n            this.setState({\n              postQuestion: '',\n              postOption1: '',\n              postOption2: '',\n              postOption3: '',\n              selectedCategory: [],\n              errorMessage: '',\n              Loading: false\n            });\n            Router.push('/home');\n          } else {\n            this.setState({\n              errorMessage: res.data.response.message,\n              Loading: false\n            });\n          }\n        });\n      }\n    });\n\n    this.state = {\n      postQuestion: '',\n      postOption1: '',\n      postOption2: '',\n      postOption3: '',\n      selectedCategory: [],\n      categoryData: [],\n      errorMessage: '',\n      Loading: false\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // console.log(props.categoryData)\n    // console.log(state.categoryData)\n    if (props.categoryData.length != state.categoryData.length) {\n      // console.log(props.categoryData)\n      props.categoryData.map(itm => {\n        return state.categoryData.push({\n          value: itm._id,\n          label: itm.title\n        });\n      });\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.fetchCategoryFN();\n  }\n\n  selectedCategoryHandle(e) {\n    this.setState({\n      selectedCategory: e\n    });\n  }\n  /**\r\n   * fetch category function \r\n   * @param {}\r\n   */\n\n\n  render() {\n    let {\n      categoryData,\n      selectedCategory,\n      postQuestion,\n      postOption1,\n      postOption2,\n      postOption3,\n      errorMessage,\n      Loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"post-main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"create-post bg-white p-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: \"post-quetio\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, __jsx(\"div\", {\n      className: \"d-flex question mb-15 mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      className: \"m-0 font-weight-bold question-ibelieve\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, \"I believe \"), __jsx(\"p\", {\n      className: \"w-75 p-5 bg-gray-1 ml-5 question-field mb-0 question-ibelieve-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    }, __jsx(\"input\", {\n      type: \"string\",\n      value: postQuestion,\n      onChange: e => this.textChangeHandle(e, \"postQuestion\"),\n      placeholder: \"Enter text here\",\n      className: \"input-text-post\",\n      \"aria-describedby\": \"querion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 37\n      }\n    }), \" \", __jsx(\"span\", {\n      className: \"text-bold times-roman\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 224\n      }\n    }, \",\"))), __jsx(\"div\", {\n      className: \"d-flex w-100 mb-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      className: \"d-flex font-weight-bold mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, \"but I might change my mind if:\")), __jsx(\"div\", {\n      className: \"w-100 mb-10 p-5 bg-gray-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"option-text d-flex option-text-inner pb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }, __jsx(\"span\", {\n      className: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    }, \"1) \"), __jsx(\"input\", {\n      type: \"string\",\n      value: postOption1,\n      onChange: e => this.textChangeHandle(e, \"postOption1\"),\n      placeholder: \"Enter text here\",\n      className: \"px-15 input-text w-100\",\n      \"aria-describedby\": \"querion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 82\n      }\n    }))), __jsx(\"div\", {\n      className: \"w-100 mt-5 mb-10 p-5 bg-gray-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"option-text d-flex option-text-inner pb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }, __jsx(\"span\", {\n      className: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 37\n      }\n    }, \"2) \"), __jsx(\"input\", {\n      type: \"string\",\n      value: postOption2,\n      onChange: e => this.textChangeHandle(e, \"postOption2\"),\n      placeholder: \"\",\n      className: \"px-15 input-text w-100\",\n      \"aria-describedby\": \"querion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 82\n      }\n    }))), __jsx(\"div\", {\n      className: \"w-100 mt-5 mb-10 p-5 bg-gray-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"option-text d-flex option-text-inner pb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, __jsx(\"span\", {\n      className: \"font-weight-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 37\n      }\n    }, \"3) \"), __jsx(\"input\", {\n      type: \"string\",\n      value: postOption3,\n      onChange: e => this.textChangeHandle(e, \"postOption3\"),\n      placeholder: \"\",\n      className: \"px-15 input-text w-100\",\n      \"aria-describedby\": \"querion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 82\n      }\n    }))), __jsx(\"div\", {\n      className: \"row justify-content-between post-footer-panel mt-25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      className: \"post-btn col-lg-6 col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    }, __jsx(Select, {\n      styles: customStyles,\n      className: \"theme-select r-4\",\n      value: selectedCategory,\n      onChange: e => this.selectedCategoryHandle(e),\n      options: categoryData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 37\n      }\n    })), __jsx(\"div\", {\n      className: \"post-btn col-lg-6 col-12 text-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger px-50 w-auto\",\n      onClick: this.postPostFN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }\n    }, \"Post\")), errorMessage && __jsx(\"div\", {\n      className: \"text-center alert-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 50\n      }\n    }, __jsx(\"p\", {\n      className: \"text-red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 37\n      }\n    }, errorMessage)), Loading && __jsx(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 45\n      }\n    }))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // console.log(state.category)\n  return {\n    auth: state.auth,\n    categoryData: state.category.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchPost: data => dispatch(fetchPost(data)),\n    getCategory: data => dispatch(getCategory(data))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePost));","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/components/post/createpost/index.js"],"names":["React","Component","Select","genericfunctions","connect","withRouter","ITEMS_LIMIT","getCategory","fetchPost","Router","Loader","customStyles","option","provided","state","color","isSelected","backgroundColor","isFocused","background","padding","CreatePost","constructor","props","e","key","setState","target","value","selectedCategory","postQuestion","postOption1","postOption2","postOption3","length","errorMessage","postData","userId","auth","authUser","categoryId","options","socialLogin","Loading","_postRequest","then","res","data","response","status","push","message","categoryData","getDerivedStateFromProps","map","itm","_id","label","title","componentDidMount","fetchCategoryFN","selectedCategoryHandle","render","textChangeHandle","postPostFN","mapStateToProps","category","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport genericfunctions from 'utilfunction/util-api-service'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'next/router'\r\nimport { ITEMS_LIMIT } from 'common/config'\r\nimport { getCategory } from 'redux/action/categoryAction'\r\nimport { fetchPost } from 'redux/action/generalAction'\r\nimport Router from 'next/router'\r\nimport Loader from 'components/loading'\r\n\r\n// import {fetchPost} from 'redux/action/generalAction'\r\n/**\r\n * created by zain ahmed\r\n * created date 22/12/2019\r\n * class component for created post \r\n */\r\nconst customStyles = {\r\n    option: (provided, state) => {\r\n        return {\r\n            ...provided,\r\n            // borderBottom: '1px dotted #ffffff',\r\n            color: state.isSelected ? 'white' : 'black',\r\n            backgroundColor: state.isFocused ? \"#464444\" : state.isSelected ? \"#464444\" : null,\r\n            '&:hover': {\r\n                background: \"#464444\",\r\n                color: 'white'\r\n            },\r\n            '&:focus': {\r\n                background: \"#464444\",\r\n                color: 'white'\r\n            },\r\n            padding: 10,\r\n        }\r\n    },\r\n}\r\nclass CreatePost extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            postQuestion: '',\r\n            postOption1: '',\r\n            postOption2: '',\r\n            postOption3: '',\r\n            selectedCategory: [],\r\n            categoryData: [],\r\n            errorMessage: '',\r\n            Loading: false\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        // console.log(props.categoryData)\r\n        // console.log(state.categoryData)\r\n\r\n        if (props.categoryData.length != state.categoryData.length) {\r\n            // console.log(props.categoryData)\r\n            props.categoryData.map(itm => {\r\n                return (\r\n                    state.categoryData.push({ value: itm._id, label: itm.title })\r\n                )\r\n            })\r\n        }\r\n        return null\r\n    }\r\n    componentDidMount() {\r\n        this.fetchCategoryFN()\r\n    }\r\n    selectedCategoryHandle(e) {\r\n        this.setState({ selectedCategory: e })\r\n    }\r\n\r\n    /**\r\n     * fetch category function \r\n     * @param {}\r\n     */\r\n    fetchCategoryFN = () => {\r\n        // let { categoryData } = this.state;\r\n        // let categoryParams = {\r\n        //     params: {\r\n        //         url: \"/category\",\r\n        //     }\r\n        // }\r\n        // console.log(this.props.categoryData)\r\n        // this.props.categoryData.data.map(itm => {\r\n        //     return (\r\n        //         categoryData.push({ value: itm._id, label: itm.title })\r\n        //     )\r\n        // })\r\n        // this.props.getCategory(categoryParams).then(res => {\r\n        //     console.log(res)\r\n\r\n        // })\r\n\r\n        // genericfunctions._fetchWithOutParams('/category').then(res => {\r\n        //     res.data.response.data.map(itm => {\r\n        //         return (\r\n        //             categoryData.push({ value: itm._id, label: itm.title })\r\n        //         )\r\n        //     })\r\n        //     this.setState({ categoryData })\r\n        // })\r\n    }\r\n    textChangeHandle = (e, key) => {\r\n        this.setState({ [key]: e.target.value })\r\n    }\r\n\r\n    /**\r\n     * create post function \r\n     * @param {userid(string) categoryId(string) postQuetion(string) options(string)} \r\n     */\r\n    postPostFN = async () => {\r\n        let { selectedCategory, postQuestion, postOption1, postOption2, postOption3 } = this.state;\r\n        // || postOption2.length <= 0 || postOption3.length <= 0\r\n        if (postQuestion.length <= 0 || postOption1.length <= 0 || !selectedCategory.value) {\r\n            this.setState({ errorMessage: \"please fill all fields\" })\r\n        } else {\r\n            let postData = {\r\n                userId: this.props.auth.authUser.userId,\r\n                categoryId: selectedCategory.value,\r\n                postQuestion,\r\n                options: [\r\n                    postOption1,\r\n                    postOption2,\r\n                    postOption3\r\n                ],\r\n                socialLogin: this.props.auth.authUser.socialLogin\r\n            }\r\n            this.setState({ Loading: true, errorMessage: '' })\r\n            genericfunctions._postRequest('/post', postData).then(res => {\r\n                if (res.data.response.status) {\r\n\r\n                    this.setState({\r\n                        postQuestion: '',\r\n                        postOption1: '',\r\n                        postOption2: '',\r\n                        postOption3: '',\r\n                        selectedCategory: [],\r\n                        errorMessage: '',\r\n                        Loading: false\r\n                    })\r\n\r\n                    Router.push('/home')\r\n                } else {\r\n                    this.setState({ errorMessage: res.data.response.message, Loading: false })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        let { categoryData, selectedCategory, postQuestion, postOption1, postOption2, postOption3, errorMessage, Loading } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className='post-main-container'>\r\n                    <div className=\"create-post bg-white p-30\">\r\n                        <div className='post-quetio'>\r\n                            <div className=\"d-flex question mb-15 mt-5\">\r\n                                <p className='m-0 font-weight-bold question-ibelieve'>I believe </p>\r\n                                <p className=\"w-75 p-5 bg-gray-1 ml-5 question-field mb-0 question-ibelieve-input\">\r\n                                    <input type=\"string\" value={postQuestion} onChange={e => this.textChangeHandle(e, \"postQuestion\")} placeholder='Enter text here' className=\"input-text-post\" aria-describedby=\"querion\" /> <span className=\"text-bold times-roman\">,</span>\r\n                                </p>\r\n                            </div>\r\n                            <div className='d-flex w-100 mb-10'>\r\n                                <p className='d-flex font-weight-bold mb-0'>but I might change my mind if:</p>\r\n                            </div>\r\n                            <div className='w-100 mb-10 p-5 bg-gray-1'>\r\n                                <div className=\"option-text d-flex option-text-inner pb-5\">\r\n                                    <span className='font-weight-bold'>1) </span><input type=\"string\" value={postOption1} onChange={e => this.textChangeHandle(e, \"postOption1\")} placeholder='Enter text here' className=\"px-15 input-text w-100\" aria-describedby=\"querion\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className='w-100 mt-5 mb-10 p-5 bg-gray-1'>\r\n                                <div className=\"option-text d-flex option-text-inner pb-5\">\r\n                                    <span className='font-weight-bold'>2) </span><input type=\"string\" value={postOption2} onChange={e => this.textChangeHandle(e, \"postOption2\")} placeholder='' className=\"px-15 input-text w-100\" aria-describedby=\"querion\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className='w-100 mt-5 mb-10 p-5 bg-gray-1'>\r\n                                <div className=\"option-text d-flex option-text-inner pb-5\">\r\n                                    <span className='font-weight-bold'>3) </span><input type=\"string\" value={postOption3} onChange={e => this.textChangeHandle(e, \"postOption3\")} placeholder='' className=\"px-15 input-text w-100\" aria-describedby=\"querion\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className='row justify-content-between post-footer-panel mt-25'>\r\n                                <div className='post-btn col-lg-6 col-12'>\r\n                                    <Select\r\n                                        styles={customStyles}\r\n                                        className='theme-select r-4'\r\n                                        value={selectedCategory}\r\n                                        onChange={e => this.selectedCategoryHandle(e)}\r\n                                        options={categoryData}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className='post-btn col-lg-6 col-12 text-right'>\r\n                                    <button type=\"button\" className=\"btn btn-danger px-50 w-auto\" onClick={this.postPostFN}>Post</button>\r\n                                </div>\r\n                                {errorMessage && <div className=\"text-center alert-error\">\r\n                                    <p className='text-red'>{errorMessage}</p>\r\n                                </div>}\r\n\r\n                                {Loading && <Loader />}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    // console.log(state.category)\r\n    return {\r\n        auth: state.auth,\r\n        categoryData: state.category.category\r\n    };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchPost: data => dispatch(fetchPost(data)),\r\n        getCategory: data => dispatch(getCategory(data))\r\n    };\r\n};\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreatePost));"]},"metadata":{},"sourceType":"module"}