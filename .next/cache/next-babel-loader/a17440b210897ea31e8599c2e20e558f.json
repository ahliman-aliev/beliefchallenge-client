{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport genericfunctions from 'utilfunction/util-api-service';\nimport Router from 'next/router';\nexport var UPDATEPROFILE = \"UPDATEPROFILE\";\nexport var SHOW_MODAL = \"SHOW_MODAL\";\nexport var HAS_PREV_URL = \"HAS_PREV_URL\";\nexport var POSTLIKES = \"POSTLIKES\";\nexport var POSTUNLIKE = \"POSTUNLIKE\";\nexport var POST_DATA = \"POST_DATA\";\nimport setObject from 'common/jwt-services';\nimport generalMethod from 'common/general-methods';\nexport var changepassword = function changepassword(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._updateRequest(params.url, params.userData).then(function (res) {\n        if (res.data.response.status) {\n          resolve(res);\n        } else {\n          resolve(res);\n        }\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\nexport var forgotpassword = function forgotpassword(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._updateRequest(params.url, params.userData).then(function (res) {\n        resolve(res);\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\nexport var updateprofile = function updateprofile(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      var _params$userData = params.userData,\n          token = _params$userData.token,\n          userId = _params$userData.userId;\n\n      if (params.userData.profilePic.name) {\n        params.userData = generalMethod.convertToFormData(params.userData);\n      }\n\n      genericfunctions._updateRequest(params.url, params.userData).then(function (res) {\n        if (res.data.response.status) {\n          var _res$data$response$da = res.data.response.data,\n              fullName = _res$data$response$da.fullName,\n              email = _res$data$response$da.email,\n              profilePic = _res$data$response$da.profilePic;\n          var authUser = {\n            token: token,\n            fullName: fullName,\n            email: email,\n            userId: userId,\n            role: 'role',\n            profilePic: profilePic.url ? profilePic.url : profilePic,\n            socialLogin: params.socialLogin\n          };\n          dispatch({\n            type: \"UPDATEPROFILE\",\n            payload: authUser\n          });\n          setObject.setObject('authUser', authUser);\n          resolve(res); // Router.replace('/home')\n        } else {\n          console.log(\"unathorized\");\n        }\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\nexport var fetchPost = function fetchPost(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._fetchWithParams(params.params.url, params).then(function (res) {\n        if (res.data && res.data.response && res.data.response.data) {\n          dispatch({\n            type: POST_DATA,\n            payload: res.data.response.data\n          });\n        }\n\n        resolve(res);\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\nexport var updatePostData = function updatePostData(params) {\n  return function (dispatch) {\n    dispatch({\n      type: POST_DATA,\n      payload: params\n    });\n  };\n};\nexport var showModal = function showModal(params) {\n  return function (dispatch) {\n    dispatch({\n      type: \"SHOW_MODAL\",\n      payload: params\n    });\n  };\n};\nexport var hasPrevUrl = function hasPrevUrl(params) {\n  return function (dispatch) {\n    dispatch({\n      type: \"HAS_PREV_URL\",\n      payload: params\n    });\n  };\n};\nexport var getPostLikes = function getPostLikes(params) {\n  return function (dispatch) {\n    return new _Promise(function (resolve, reject) {\n      genericfunctions._fetchWithOutParams(params.url).then(function (res) {\n        if (res.data.response.status) {\n          dispatch({\n            type: \"POSTLIKES\",\n            payload: res.data.response.data.postId\n          });\n          resolve(res);\n        }\n      })[\"catch\"](function (err) {\n        reject({\n          message: err\n        });\n      });\n    });\n  };\n};\nexport var addPostLike = function addPostLike(params) {\n  return function (dispatch, getState) {\n    return new _Promise(function (resolve, reject) {\n      var likesData = getState().general.postLikes;\n\n      if (params.likeFlag == 'add') {\n        likesData.push(params.postId);\n        dispatch({\n          type: \"POSTLIKES\",\n          payload: likesData\n        });\n      } else {\n        var ind = likesData.findIndex(function (itm) {\n          return itm == params.postId;\n        });\n\n        if (ind > -1) {\n          likesData.splice(ind, 1);\n          dispatch({\n            type: \"POSTLIKES\",\n            payload: likesData\n          });\n        } // dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\n\n      }\n\n      resolve(getState().general.postLikes);\n    });\n  };\n};\nexport var removePostLike = function removePostLike(params) {\n  return function (dispatch, getState) {\n    return new _Promise(function (resolve, reject) {\n      // genericfunctions._fetchWithOutParams(\"/likepost\").then(({ data }) => {\n      //     console.log(data.response.data, 'mor k')\n      // })\n      var likesData = getState().general.postLikes;\n      console.log(likesData, 'remove');\n\n      if (params.likeFlag == 'remove') {\n        likesData.splice(likesData.indexOf(params.postId), 1);\n        console.log(likesData);\n        dispatch({\n          type: \"POSTUNLIKE\",\n          payload: likesData\n        });\n        resolve(true);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["F:/beliefchallenge/beliefchallenge_client/redux/action/generalAction.js"],"names":["genericfunctions","Router","UPDATEPROFILE","SHOW_MODAL","HAS_PREV_URL","POSTLIKES","POSTUNLIKE","POST_DATA","setObject","generalMethod","changepassword","params","dispatch","resolve","reject","_updateRequest","url","userData","then","res","data","response","status","err","message","forgotpassword","updateprofile","token","userId","profilePic","name","convertToFormData","fullName","email","authUser","role","socialLogin","type","payload","console","log","fetchPost","_fetchWithParams","updatePostData","showModal","hasPrevUrl","getPostLikes","_fetchWithOutParams","postId","addPostLike","getState","likesData","general","postLikes","likeFlag","push","ind","findIndex","itm","splice","removePostLike","indexOf"],"mappings":"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","sourcesContent":["import genericfunctions from 'utilfunction/util-api-service'\r\nimport Router from 'next/router'\r\nexport const UPDATEPROFILE = \"UPDATEPROFILE\"\r\nexport const SHOW_MODAL = \"SHOW_MODAL\"\r\nexport const HAS_PREV_URL = \"HAS_PREV_URL\"\r\nexport const POSTLIKES = \"POSTLIKES\"\r\nexport const POSTUNLIKE = \"POSTUNLIKE\"\r\nexport const POST_DATA = \"POST_DATA\"\r\nimport setObject from 'common/jwt-services'\r\nimport generalMethod from 'common/general-methods'\r\n\r\n\r\nexport const changepassword = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    resolve(res);\r\n                } else {\r\n                    resolve(res);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\nexport const forgotpassword = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\nexport const updateprofile = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let { token, userId } = params.userData\r\n        if (params.userData.profilePic.name) {\r\n            params.userData = generalMethod.convertToFormData(params.userData)\r\n        }\r\n\r\n        genericfunctions._updateRequest(params.url, params.userData)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    let { fullName, email, profilePic } = res.data.response.data\r\n                    let authUser =\r\n                    {\r\n                        token: token,\r\n                        fullName,\r\n                        email,\r\n                        userId: userId,\r\n                        role: 'role',\r\n                        profilePic: profilePic.url ? profilePic.url : profilePic,\r\n                        socialLogin: params.socialLogin\r\n                    }\r\n                    dispatch({ type: \"UPDATEPROFILE\", payload: authUser })\r\n                    setObject.setObject('authUser', authUser)\r\n                    resolve(res);\r\n                    // Router.replace('/home')\r\n\r\n                } else {\r\n                    console.log(\"unathorized\")\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err });\r\n            });\r\n    })\r\n\r\n};\r\n\r\n\r\nexport const fetchPost = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._fetchWithParams(params.params.url, params)\r\n            .then(res => {\r\n\r\n                if (res.data && res.data.response && res.data.response.data) {\r\n                    dispatch({ type: POST_DATA, payload: res.data.response.data })\r\n                }\r\n                \r\n                resolve(res)\r\n\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err })\r\n            })\r\n    })\r\n}\r\n\r\nexport const updatePostData = params => dispatch => {\r\n    dispatch({ type: POST_DATA, payload: params })\r\n}\r\n\r\nexport const showModal = params => dispatch => {\r\n    dispatch({ type: \"SHOW_MODAL\", payload: params })\r\n}\r\n\r\nexport const hasPrevUrl = params => dispatch => {\r\n    dispatch({ type: \"HAS_PREV_URL\", payload: params })\r\n}\r\n\r\n\r\nexport const getPostLikes = params => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        genericfunctions._fetchWithOutParams(params.url)\r\n            .then(res => {\r\n                if (res.data.response.status) {\r\n                    dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\r\n                    resolve(res)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                reject({ message: err })\r\n            })\r\n    })\r\n}\r\n\r\n\r\nexport const addPostLike = params => (dispatch, getState) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let likesData = getState().general.postLikes\r\n        if (params.likeFlag == 'add') {\r\n            likesData.push(params.postId);\r\n            dispatch({ type: \"POSTLIKES\", payload: likesData })\r\n        } else {\r\n            let ind = likesData.findIndex(itm => itm == params.postId)\r\n            if (ind > -1) {\r\n                likesData.splice(ind, 1);\r\n                dispatch({ type: \"POSTLIKES\", payload: likesData })\r\n            }\r\n            // dispatch({ type: \"POSTLIKES\", payload: res.data.response.data.postId })\r\n\r\n        }\r\n        resolve(getState().general.postLikes)\r\n    })\r\n}\r\n\r\nexport const removePostLike = params => (dispatch, getState) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        // genericfunctions._fetchWithOutParams(\"/likepost\").then(({ data }) => {\r\n        //     console.log(data.response.data, 'mor k')\r\n        // })\r\n\r\n\r\n        let likesData = getState().general.postLikes\r\n        console.log(likesData, 'remove')\r\n        if (params.likeFlag == 'remove') {\r\n\r\n            likesData.splice(likesData.indexOf(params.postId), 1);\r\n            console.log(likesData)\r\n            dispatch({ type: \"POSTUNLIKE\", payload: likesData })\r\n            resolve(true)\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}